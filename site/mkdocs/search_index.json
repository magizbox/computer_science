{
    "docs": [
        {
            "location": "/", 
            "text": "Computer Science\n\n\nChallenges\n\n\nProject Euler\n\n\n\n\n\n\nProject Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help\nyou arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.\n\n\nThe motivation for starting Project Euler, and its continuation, is to provide a platform for the inquiring mind to delve into unfamiliar areas and learn new concepts in a fun and recreational context.\n\n\n\n\ngithub\n\n\nKaggle\n\n\ndatayo", 
            "title": "Home"
        }, 
        {
            "location": "/#computer-science", 
            "text": "", 
            "title": "Computer Science"
        }, 
        {
            "location": "/#challenges", 
            "text": "", 
            "title": "Challenges"
        }, 
        {
            "location": "/#project-euler", 
            "text": "Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help\nyou arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.  The motivation for starting Project Euler, and its continuation, is to provide a platform for the inquiring mind to delve into unfamiliar areas and learn new concepts in a fun and recreational context.   github", 
            "title": "Project Euler"
        }, 
        {
            "location": "/#kaggle", 
            "text": "datayo", 
            "title": "Kaggle"
        }, 
        {
            "location": "/database/", 
            "text": "Database\n\n\nRelational DBMS\n: Oracle, MySQL, SQLite\n\n\nKey-value Stores\n: Redis, Memcached\n\n\nDocument stores\n: MongoDB\n\n\nGraph\n: Neo4j\n\n\nWide column stores\n: Cassandra, HBase\n\n\nDesign and Modeling (a.k.a Data Definition)\n\n\n1.1 Schema\n\n\nA database schema of a database system is its structure described in a formal language supported by the database management system (DBMS) and refers to the organization of data as a blueprint of how a database is constructed (divided into database tables in the case of Relational Databases). The formal definition of database schema is a set of formulas (sentences) called integrity constraints imposed on a database. These integrity constraints ensure compatibility between parts of the schema. All constraints are expressible in the same language. A database can be considered a structure in realization of the database language. The states of a created conceptual schema are transformed into an explicit mapping, the database schema. This describes how real world entities are modeled in the database.\n\n\n1.1.1 Type\n\n\nIn computer science and computer programming, a data type or simply type is a classification identifying one of various types of data, such as real, integer or Boolean, that determines the possible values for that type; the operations that can be done on values of that type; the meaning of the data; and the way values of that type can be stored.\n\n\nTEXT\n, \nINT\n, \nENUM\n, \nTIMESTAMP\n\n\n1.2 Cardinality (a.k.a Relationship)\n\n\nForeign key\n, \nPrimary key\n\n\n1.2 Indexing\n\n\nA database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records. Why Indexing is important?\n\n\nIndexing in MySQL\n\n\nCREATE INDEX NameIndex ON Employee (name)\nSELECT * FROM Employee WHERE name = 'Ashish'\n\n\n\n\n2. Data Manipulation\n\n\nCreate - Read - Update - Delete\n\n\n\n\nCreate or add new entries\n\n\nRead, retrieve, search, or view existing entries * Update or edit existing entries * Delete/deactivate existing entries\n\n\n\n\n/* create */\nCREATE TABLE Guests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP )\n/* create (insert) */\nINSERT INTO Guests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\n/* read */\nSELECT * FROM Guests WHERE id=1 /* update */ UPDATE Guests SET lastname='Doe' WHERE id=1\n/* delete */\nDELETE FROM Guests WHERE id=1`\n\n\n\n\n3. Data Retrieve \n Transaction\n\n\n3.1 Data Retrieve\n\n\nSELECT\n, \nWHERE\n, \nFROM\n, \nLIMIT\n, \nJOIN\n, \nGROUP BY\n, \nHAVING\n\n\nGet user id, user name and number of post of this user\n\n\nSELECT user.id, user.name, COUNT(post.*) AS posts\nFROM user LEFT OUTER JOIN post ON post.owner_id=user.id GROUP BY user.id`\n\n\n\n\nSelect user who only order one time.\n\n\nSELECT name, COUNT(name) AS c FROM orders GROUP BY name HAVING c = 1;\n\n\n\n\nCalculate the longest period (in days) that the company has gone without a hiring or firing anyone.\n\n\nSELECT x.date, MIN(y.date) y_date, DATEDIFF(MIN(y.date),x.date) days\nFROM ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees ) x\nJOIN ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees UNION SELECT CURDATE()) y\nON y.date \n x.date GROUP BY x.date ORDER BY days DESC LIMIT 1;\n\n\n\n\nData Retrieve API\n\n\n\n\n\n\n\n\nAPI\n\n\nDescription\n\n\n\n\n\n\nget\n\n\nget single item\n\n\n\n\n\n\n\n\nGet dog by id\n\n\nDog.get(1)\n\n\n\n\n\n\n\n\nfind\n\n\n\n\nfind items\n\n\n@see\ncollection.find()\n\n\n\n\n\n\n\n\n\n\nFind dog name \"Max\"\n\n\n Dog.find({\"name\": \"Max\"})\n\n\n\n\n\n\n\n\nsort\n\n\n\n\nsort items\n\n\n@see\ncursor.sort\n\n\n\n\n\n\n\n\n\n\nGet 10 older dogs\n\n\nDog.find().sort(\"age\", {limit: 10})\n\n\n\n\n\n\n\n\naggregate\n\n\n\n\nsum, min, max items\n\n\n@see\ncollection.aggregate\n\n\n\n\n\n\n\n\n\n\nGet sum of dogs' age\n\n\nDog.find().aggregate({\n  \"sum_age\":  {\n     $sum: \"age\"\n   }\n})\n\n\n\n\n\n\n\n\n\n\n\n3.2 Transaction\n\n\nA transaction symbolizes a unit of work performed within a database management system (or similar system) against a database, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in database. Example: Transfer 900$ from Account\n\n\nBob\n to \nAlice\n\n\nstart transaction\nselect balance from Account where Account_Number='Bob';\nselect balance from Account where Account_Number='Alice';\nupdate Account set balance=balance-900 here Account_Number='Bob' ;\nupdate Account set balance=balance+900 here Account_Number='Alice' ;\ncommit; //if all sql queries succed rollback; //if any of Sql queries failed or error\n\n\n\n\nACID Properties\n\n\nIn computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties that guarantee that database transactions are processed reliably. In the context of databases, a single logical operation on the data is called a transaction.\n\n\nFor example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction. ![][16]\n\n\n4. Backup and Restore\n\n\nSometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when the database is found corrupted due to a software error, or if it has been updated with erroneous data). To achieve this a backup operation is done occasionally or continuously, where each desired database state (i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backup files (many techniques exist to do this effectively). When this state is needed, i.e., when it is decided by a database administrator to bring the database back to this state (e.g., by specifying this state by a desired point in time when the database was in this state), these files are utilized to restore that state.\n\n\n5. Migration\n\n\nIn software engineering, schema migration (also database migration, database change management) refers to the management of incremental, reversible changes to relational database schemas. A schema migration is performed on a database whenever it is necessary to update or revert that database's schema to some newer or older version. Example: Android Migration by droid-migrate\n\n\ndroid-migrate init -d my_database droid-migrate generate up droid-migrate generate down\n\n\n\n\nExample: Database Seeding with Laravel\n\n\n6. Active record pattern | Object-Relational Mapping (ORM)\n\n\nObject-relational mapping in computer science is a programming technique for converting data between incompatible type systems in object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language. There are both free and commercial packages available that perform object-relational mapping, although some programmers opt to create their own ORM tools.\n\n\nExample\n\n\nphp\n\n\n$employee = new Employee(); $employee-\nsetName(\nJoe\n); $employee-\nsave();\n\n\n\n\nAndroid\n\n\npublic class User {\n  @DatabaseField(id = true) String username;\n  @DatabaseField String password;\n  @DatabaseField String email;\n  @DatabaseField String alias;\n  public User() {} }\n\n\n\n\nImplementations\n\n\n\n\nAndroid: [ormlite-android]\n\n\nPHP: [Eloquent]", 
            "title": "Introduction"
        }, 
        {
            "location": "/database/#database", 
            "text": "Relational DBMS : Oracle, MySQL, SQLite  Key-value Stores : Redis, Memcached  Document stores : MongoDB  Graph : Neo4j  Wide column stores : Cassandra, HBase", 
            "title": "Database"
        }, 
        {
            "location": "/database/#design-and-modeling-aka-data-definition", 
            "text": "", 
            "title": "Design and Modeling (a.k.a Data Definition)"
        }, 
        {
            "location": "/database/#1461-schema", 
            "text": "A database schema of a database system is its structure described in a formal language supported by the database management system (DBMS) and refers to the organization of data as a blueprint of how a database is constructed (divided into database tables in the case of Relational Databases). The formal definition of database schema is a set of formulas (sentences) called integrity constraints imposed on a database. These integrity constraints ensure compatibility between parts of the schema. All constraints are expressible in the same language. A database can be considered a structure in realization of the database language. The states of a created conceptual schema are transformed into an explicit mapping, the database schema. This describes how real world entities are modeled in the database.", 
            "title": "1.1 Schema"
        }, 
        {
            "location": "/database/#14611-type", 
            "text": "In computer science and computer programming, a data type or simply type is a classification identifying one of various types of data, such as real, integer or Boolean, that determines the possible values for that type; the operations that can be done on values of that type; the meaning of the data; and the way values of that type can be stored.  TEXT ,  INT ,  ENUM ,  TIMESTAMP", 
            "title": "1.1.1 Type"
        }, 
        {
            "location": "/database/#12-cardinality-aka-relationship", 
            "text": "Foreign key ,  Primary key", 
            "title": "1.2 Cardinality (a.k.a Relationship)"
        }, 
        {
            "location": "/database/#1462-indexing", 
            "text": "A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records. Why Indexing is important?  Indexing in MySQL  CREATE INDEX NameIndex ON Employee (name)\nSELECT * FROM Employee WHERE name = 'Ashish'", 
            "title": "1.2 Indexing"
        }, 
        {
            "location": "/database/#2-data-manipulation", 
            "text": "", 
            "title": "2. Data Manipulation"
        }, 
        {
            "location": "/database/#create-read-update-delete", 
            "text": "Create or add new entries  Read, retrieve, search, or view existing entries * Update or edit existing entries * Delete/deactivate existing entries   /* create */\nCREATE TABLE Guests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP )\n/* create (insert) */\nINSERT INTO Guests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\n/* read */\nSELECT * FROM Guests WHERE id=1 /* update */ UPDATE Guests SET lastname='Doe' WHERE id=1\n/* delete */\nDELETE FROM Guests WHERE id=1`", 
            "title": "Create - Read - Update - Delete"
        }, 
        {
            "location": "/database/#3-data-retrieve-transaction", 
            "text": "", 
            "title": "3. Data Retrieve &amp; Transaction"
        }, 
        {
            "location": "/database/#31-data-retrieve", 
            "text": "SELECT ,  WHERE ,  FROM ,  LIMIT ,  JOIN ,  GROUP BY ,  HAVING  Get user id, user name and number of post of this user  SELECT user.id, user.name, COUNT(post.*) AS posts\nFROM user LEFT OUTER JOIN post ON post.owner_id=user.id GROUP BY user.id`  Select user who only order one time.  SELECT name, COUNT(name) AS c FROM orders GROUP BY name HAVING c = 1;  Calculate the longest period (in days) that the company has gone without a hiring or firing anyone.  SELECT x.date, MIN(y.date) y_date, DATEDIFF(MIN(y.date),x.date) days\nFROM ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees ) x\nJOIN ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees UNION SELECT CURDATE()) y\nON y.date   x.date GROUP BY x.date ORDER BY days DESC LIMIT 1;  Data Retrieve API     API  Description    get  get single item     Get dog by id  Dog.get(1)     find   find items  @see collection.find()      Find dog name \"Max\"   Dog.find({\"name\": \"Max\"})     sort   sort items  @see cursor.sort      Get 10 older dogs  Dog.find().sort(\"age\", {limit: 10})     aggregate   sum, min, max items  @see collection.aggregate      Get sum of dogs' age  Dog.find().aggregate({\n  \"sum_age\":  {\n     $sum: \"age\"\n   }\n})", 
            "title": "3.1 Data Retrieve"
        }, 
        {
            "location": "/database/#32-transaction", 
            "text": "A transaction symbolizes a unit of work performed within a database management system (or similar system) against a database, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in database. Example: Transfer 900$ from Account  Bob  to  Alice  start transaction\nselect balance from Account where Account_Number='Bob';\nselect balance from Account where Account_Number='Alice';\nupdate Account set balance=balance-900 here Account_Number='Bob' ;\nupdate Account set balance=balance+900 here Account_Number='Alice' ;\ncommit; //if all sql queries succed rollback; //if any of Sql queries failed or error  ACID Properties  In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties that guarantee that database transactions are processed reliably. In the context of databases, a single logical operation on the data is called a transaction.  For example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction. ![][16]", 
            "title": "3.2 Transaction"
        }, 
        {
            "location": "/database/#446-backup-and-restore", 
            "text": "Sometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when the database is found corrupted due to a software error, or if it has been updated with erroneous data). To achieve this a backup operation is done occasionally or continuously, where each desired database state (i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backup files (many techniques exist to do this effectively). When this state is needed, i.e., when it is decided by a database administrator to bring the database back to this state (e.g., by specifying this state by a desired point in time when the database was in this state), these files are utilized to restore that state.", 
            "title": "4. Backup and Restore"
        }, 
        {
            "location": "/database/#546-migration", 
            "text": "In software engineering, schema migration (also database migration, database change management) refers to the management of incremental, reversible changes to relational database schemas. A schema migration is performed on a database whenever it is necessary to update or revert that database's schema to some newer or older version. Example: Android Migration by droid-migrate  droid-migrate init -d my_database droid-migrate generate up droid-migrate generate down  Example: Database Seeding with Laravel", 
            "title": "5. Migration"
        }, 
        {
            "location": "/database/#646-active-record-pattern-object-relational-mapping-orm", 
            "text": "Object-relational mapping in computer science is a programming technique for converting data between incompatible type systems in object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language. There are both free and commercial packages available that perform object-relational mapping, although some programmers opt to create their own ORM tools.  Example  php  $employee = new Employee(); $employee- setName( Joe ); $employee- save();  Android  public class User {\n  @DatabaseField(id = true) String username;\n  @DatabaseField String password;\n  @DatabaseField String email;\n  @DatabaseField String alias;\n  public User() {} }  Implementations   Android: [ormlite-android]  PHP: [Eloquent]", 
            "title": "6. Active record pattern | Object-Relational Mapping (ORM)"
        }, 
        {
            "location": "/db_sql/", 
            "text": "SQL\n\n\n\n  SELECT * FROM WORLD\n\n\n\n\n\n\n\n  INSERT INTO\n\n\n\n\n\n\n\n\nSELECT * FROM girls", 
            "title": "SQL"
        }, 
        {
            "location": "/db_sql/#sql", 
            "text": "SELECT * FROM WORLD   \n  INSERT INTO    SELECT * FROM girls", 
            "title": "SQL"
        }, 
        {
            "location": "/db_mysql/", 
            "text": "MySQL\n\n\n\n\nMySQL is an open-source relational database management system (RDBMS); in July 2013, it was the world's second most widely used RDBMS, and the most widely used open-source client\u2013server model RDBMS. It is named after co-founder Michael Widenius's daughter, My. The SQL abbreviation stands for Structured Query Language. The MySQL development project has made its source code available under the terms of the GNU General Public License, as well as under a variety of proprietary agreements. MySQL was owned and sponsored by a single for-profit firm, the Swedish company MySQL AB, now owned by Oracle Corporation. For proprietary use, several paid editions are available, and offer additional functionality.\n\n\nMySQL: Docker\n\n\nDocker Run\n\n\ndocker pull mysql\ndocker run -d \\\n  -p 3306:3306 \\\n  --env MYSQL_ROOT_PASSWORD=docker \\\n  --env MYSQL_DATABASE=docker \\\n  --env MYSQL_USER=docker \\\n  --env MYSQL_PASSWORD=docker \\\n  mysql\n\n\n\n\nNote: On Windows, view your \n0.0.0.0\n IP by running below command line (or you can turn on Kitematic to view ip)\n\n\nDocker Compoose\n\n\nStep 1\n: Clone Docker Project\n\n\ngit clone https://github.com/magizbox/docker-mysql.git\nmv docker-mysql mysql\n\n\n\n\nStep 2\n: Docker Compose\n\n\nversion: \n2\n\n\nservices:\n mysql:\n  build: ./mysql/.\n  ports:\n   - 3306:3306\n  environment:\n   - MYSQL_ROOT_PASSWORD=docker\n   - MYSQL_DATABASE=docker\n   - MYSQL_USER=docker\n   - MYSQL_PASSWORD=docker\n  volumes:\n   - ./data/mysql:/var/lib/mysql\n\n\n\n\nDocker Folder\n\n\nmysql/\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 my.cnf\n\u2514\u2500\u2500 Dockerfile\n\n\n\n\nVerify\n\n\ndocker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM\ndefault   *        virtualbox   Running   tcp://192.168.99.100:2376\n\n\n\n\nYou can add phpmyadmin to see mysql works\n\n\n phpmyadmin:\n  image: phpmyadmin/phpmyadmin\n  links:\n   - mysql\n  environment:\n   - PMA_ARBITRARY=1\n  ports:\n   - 80:80\n\n\n\n\nSee it works\n\n\n\n\nGo to localhost\n\n\nLogin with Server=mysql, Username=docker, Password=docker", 
            "title": "MySQL"
        }, 
        {
            "location": "/db_mysql/#mysql", 
            "text": "MySQL is an open-source relational database management system (RDBMS); in July 2013, it was the world's second most widely used RDBMS, and the most widely used open-source client\u2013server model RDBMS. It is named after co-founder Michael Widenius's daughter, My. The SQL abbreviation stands for Structured Query Language. The MySQL development project has made its source code available under the terms of the GNU General Public License, as well as under a variety of proprietary agreements. MySQL was owned and sponsored by a single for-profit firm, the Swedish company MySQL AB, now owned by Oracle Corporation. For proprietary use, several paid editions are available, and offer additional functionality.", 
            "title": "MySQL"
        }, 
        {
            "location": "/db_mysql/#mysql-docker", 
            "text": "", 
            "title": "MySQL: Docker"
        }, 
        {
            "location": "/db_mysql/#docker-run", 
            "text": "docker pull mysql\ndocker run -d \\\n  -p 3306:3306 \\\n  --env MYSQL_ROOT_PASSWORD=docker \\\n  --env MYSQL_DATABASE=docker \\\n  --env MYSQL_USER=docker \\\n  --env MYSQL_PASSWORD=docker \\\n  mysql  Note: On Windows, view your  0.0.0.0  IP by running below command line (or you can turn on Kitematic to view ip)", 
            "title": "Docker Run"
        }, 
        {
            "location": "/db_mysql/#docker-compoose", 
            "text": "Step 1 : Clone Docker Project  git clone https://github.com/magizbox/docker-mysql.git\nmv docker-mysql mysql  Step 2 : Docker Compose  version:  2 \n\nservices:\n mysql:\n  build: ./mysql/.\n  ports:\n   - 3306:3306\n  environment:\n   - MYSQL_ROOT_PASSWORD=docker\n   - MYSQL_DATABASE=docker\n   - MYSQL_USER=docker\n   - MYSQL_PASSWORD=docker\n  volumes:\n   - ./data/mysql:/var/lib/mysql", 
            "title": "Docker Compoose"
        }, 
        {
            "location": "/db_mysql/#docker-folder", 
            "text": "mysql/\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 my.cnf\n\u2514\u2500\u2500 Dockerfile", 
            "title": "Docker Folder"
        }, 
        {
            "location": "/db_mysql/#verify", 
            "text": "docker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM\ndefault   *        virtualbox   Running   tcp://192.168.99.100:2376  You can add phpmyadmin to see mysql works   phpmyadmin:\n  image: phpmyadmin/phpmyadmin\n  links:\n   - mysql\n  environment:\n   - PMA_ARBITRARY=1\n  ports:\n   - 80:80  See it works   Go to localhost  Login with Server=mysql, Username=docker, Password=docker", 
            "title": "Verify"
        }, 
        {
            "location": "/db_redis/", 
            "text": "Redis\n\n\n\n\nRedis is an open source (BSD licensed), in-memory data structure store, used as database, cache and message broker. \n1\n\n\nIt supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries.\n\n\nRedis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.\n\n\nRedis: Client\n\n\nPython Client\n\n\npipy/redis\n\n\nInstallation\n\n\npip install redis\n\n\n\n\nUsage\n\n\nimport redis\nr = redis.StrictRedis(host='localhost', port=6379, db=0)\nr.set('foo', 'bar')\n-\n True\n\nr.get('foo')\n-\n 'bar'\n\nr.delete('foo')\n\n# after delete\nr.get('foo')\n-\n None\n\n\n\n\nJava Client\n\n\nhttps://redislabs.com/redis-java\n\n\nRedis: Docker\n\n\nDocker Run\n\n\ndocker run -d -p 6379:6379 redis\n\n\n\n\nDocker Compose\n\n\nversion: \n2\n\n\nservices:\n redis:\n  image: redis\n  ports:\n   - 6379:6379\n\n\n\n\n\n\n\n\n\n\n\n\nRedis.io", 
            "title": "Redis"
        }, 
        {
            "location": "/db_redis/#redis", 
            "text": "Redis is an open source (BSD licensed), in-memory data structure store, used as database, cache and message broker.  1  It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries.  Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.", 
            "title": "Redis"
        }, 
        {
            "location": "/db_redis/#redis-client", 
            "text": "", 
            "title": "Redis: Client"
        }, 
        {
            "location": "/db_redis/#python-client", 
            "text": "pipy/redis  Installation  pip install redis  Usage  import redis\nr = redis.StrictRedis(host='localhost', port=6379, db=0)\nr.set('foo', 'bar')\n-  True\n\nr.get('foo')\n-  'bar'\n\nr.delete('foo')\n\n# after delete\nr.get('foo')\n-  None", 
            "title": "Python Client"
        }, 
        {
            "location": "/db_redis/#java-client", 
            "text": "https://redislabs.com/redis-java", 
            "title": "Java Client"
        }, 
        {
            "location": "/db_redis/#redis-docker", 
            "text": "", 
            "title": "Redis: Docker"
        }, 
        {
            "location": "/db_redis/#docker-run", 
            "text": "docker run -d -p 6379:6379 redis", 
            "title": "Docker Run"
        }, 
        {
            "location": "/db_redis/#docker-compose", 
            "text": "version:  2 \n\nservices:\n redis:\n  image: redis\n  ports:\n   - 6379:6379      Redis.io", 
            "title": "Docker Compose"
        }, 
        {
            "location": "/db_mongo/", 
            "text": "Mongo\n\n\n\n\nMongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.\n\n\nMongoDB provides high performance data persistence. In particular,\n\n\n\n\nSupport for embedded data models reduces I/O activity on database system.\n\n\nIndexes support faster queries and can include keys from embedded documents and arrays.\n\n\n\n\nMongoDB is #1 in the Document Store according to \ndb-engines\n\n\nClient\n\n\nMongo Shell\n\n\nThe \nmongo shell\n is an interactive JavaScript interface to MongoDB and is a component of the MongoDB package. You can use the mongo shell to query and update data as well as perform administrative operations.\n\n\nStart Mongo\n\n\nOnce you have installed and have started MongoDB, connect the mongo shell to your running MongoDB instance. Ensure that MongoDB is running before attempting to launch the mongo shell.\n\n\nmongo\n\n\n\n\nInteract with mongo via shell\n\n\n# Show list database\n\n show dbs\n\n# Create or use a database\n\n use \ndatabase_name\n\n\n use test # example\n\n# List collection\n\n show collections\n\n# Create or use a collection\n\n db.\ncollection_name\n\n\n db.new_collection # example\n\n# Read document\n\n db.new_collection.find()\n\n# Insert new document\n\n db.new_collection.insertOne({\na\n: \nb\n})\n\n# Update document\n\n db.new_collection.update({\na\n: \nb\n}, {$set: {\na\n: \nbcd\n}})\n\n# Remove document\n\n db.new_collection.remove({\na\n: \nb\n})\n\n\n\n\nPyMongo - Python Client\n\n\nPyMongo\n is a Python distribution containing tools for working with MongoDB, and is the recommended way to work with MongoDB from Python. This documentation attempts to explain everything you need to know to use PyMongo.\n\n\nInstallation\n\n\nWe recommend using pip to install pymongo on all platforms:\n\n\npip install pymongo\n\n\n\n\nUsage\n\n\nimport pymongo\n# create connection\nclient = pymongo.MongoClient('127.0.0.1', 27017)\n-\n MongoClient(host=['127.0.0.1:27017'], document_class=dict, tz_aware=False, connect=True)\n\n# create database\ndb = client.db_test\n-\n Database(MongoClient(host=['127.0.0.1:27017'], document_class=dict, tz_aware=False, connect=True), u'db_test')\n\n# create collection (collection is the same with table in SQL)\ncollection = db.new_collection\n\n# insert document to collection (document is the same with rows in SQL)\ndb.collection.insert_one({\nc\n: \nd\n})\n-\n  \npymongo.results.InsertOneResult at 0x7f7eab3c9f00\n\n\n# read document of collection\ndb.new_collection.find_one({\nc\n: \nd\n})\n-\n {u'_id': ObjectId('589a8195f23e627a973c4d3c'), u'c': u'd'}\n\n# update documents of collection\ndb.new_collection.update(\n    { \nc\n : \nd\n },\n    { \n$set\n: { \nc\n: \ndef\n}}\n)\n-\n {u'n': 1, u'nModified': 1, u'ok': 1.0, 'updatedExisting': True}\n\n# remove document of collection\ndb.new_collection.remove({\nc\n: \ndef\n})\n-\n {u'n': 1, u'ok': 1.0}\n\n\n\n\nDocker\n\n\nDocker Run\n\n\nRun images and share port\n\n\ndocker run -p 27017:27017 mongo:latest", 
            "title": "Mongo"
        }, 
        {
            "location": "/db_mongo/#mongo", 
            "text": "MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.  MongoDB provides high performance data persistence. In particular,   Support for embedded data models reduces I/O activity on database system.  Indexes support faster queries and can include keys from embedded documents and arrays.   MongoDB is #1 in the Document Store according to  db-engines", 
            "title": "Mongo"
        }, 
        {
            "location": "/db_mongo/#client", 
            "text": "", 
            "title": "Client"
        }, 
        {
            "location": "/db_mongo/#mongo-shell", 
            "text": "The  mongo shell  is an interactive JavaScript interface to MongoDB and is a component of the MongoDB package. You can use the mongo shell to query and update data as well as perform administrative operations.  Start Mongo  Once you have installed and have started MongoDB, connect the mongo shell to your running MongoDB instance. Ensure that MongoDB is running before attempting to launch the mongo shell.  mongo  Interact with mongo via shell  # Show list database  show dbs\n\n# Create or use a database  use  database_name   use test # example\n\n# List collection  show collections\n\n# Create or use a collection  db. collection_name   db.new_collection # example\n\n# Read document  db.new_collection.find()\n\n# Insert new document  db.new_collection.insertOne({ a :  b })\n\n# Update document  db.new_collection.update({ a :  b }, {$set: { a :  bcd }})\n\n# Remove document  db.new_collection.remove({ a :  b })", 
            "title": "Mongo Shell"
        }, 
        {
            "location": "/db_mongo/#pymongo-python-client", 
            "text": "PyMongo  is a Python distribution containing tools for working with MongoDB, and is the recommended way to work with MongoDB from Python. This documentation attempts to explain everything you need to know to use PyMongo.", 
            "title": "PyMongo - Python Client"
        }, 
        {
            "location": "/db_mongo/#installation", 
            "text": "We recommend using pip to install pymongo on all platforms:  pip install pymongo", 
            "title": "Installation"
        }, 
        {
            "location": "/db_mongo/#usage", 
            "text": "import pymongo\n# create connection\nclient = pymongo.MongoClient('127.0.0.1', 27017)\n-  MongoClient(host=['127.0.0.1:27017'], document_class=dict, tz_aware=False, connect=True)\n\n# create database\ndb = client.db_test\n-  Database(MongoClient(host=['127.0.0.1:27017'], document_class=dict, tz_aware=False, connect=True), u'db_test')\n\n# create collection (collection is the same with table in SQL)\ncollection = db.new_collection\n\n# insert document to collection (document is the same with rows in SQL)\ndb.collection.insert_one({ c :  d })\n-    pymongo.results.InsertOneResult at 0x7f7eab3c9f00 \n\n# read document of collection\ndb.new_collection.find_one({ c :  d })\n-  {u'_id': ObjectId('589a8195f23e627a973c4d3c'), u'c': u'd'}\n\n# update documents of collection\ndb.new_collection.update(\n    {  c  :  d  },\n    {  $set : {  c :  def }}\n)\n-  {u'n': 1, u'nModified': 1, u'ok': 1.0, 'updatedExisting': True}\n\n# remove document of collection\ndb.new_collection.remove({ c :  def })\n-  {u'n': 1, u'ok': 1.0}", 
            "title": "Usage"
        }, 
        {
            "location": "/db_mongo/#docker", 
            "text": "", 
            "title": "Docker"
        }, 
        {
            "location": "/db_mongo/#docker-run", 
            "text": "Run images and share port  docker run -p 27017:27017 mongo:latest", 
            "title": "Docker Run"
        }, 
        {
            "location": "/networking/", 
            "text": "Networking\n\n\nTCP/IP\n\n\nTCP/IP is the protocol that has run the Internet for 30 years.\n\n\n\nHow TCP/IP works\n\n\n\n\nRead More\n\n\n\n\nHappy 30th Anniversary, Internet and TCP/IP!!!\n\n\n\n\nP2P\n\n\nPeer-to-peer (P2P) computing or networking is a distributed application architecture that partitions tasks or workloads between peers. Peers are equally privileged, equipotent participants in the application. They are said to form a peer-to-peer network of nodes.\n\n\n\n\nPeers make a portion of their resources, such as processing power, disk storage or network bandwidth, directly available to other network participants, without the need for central coordination by servers or stable hosts.[1] Peers are both suppliers and consumers of resources, in contrast to the traditional client-server model in which the consumption and supply of resources is divided. Emerging collaborative P2P systems are going beyond the era of peers doing similar things while sharing resources, and are looking for diverse peers that can bring in unique resources and capabilities to a virtual community thereby empowering it to engage in greater tasks beyond those that can be accomplished by individual peers, yet that are beneficial to all the peers.\n\n\nbridge vs NAT\n\n\nWhen you create a new virtual machine, you have one of many options when it comes to choosing your network connectivity.  Two common options are to use either bridged networking or network address translation (NAT).  So, what exactly does that look like?  Take a look at the figure below.\n\n\n\n\nNAT\n: In this diagram, the vertical line next to the firewall represents the production network and you can see that 192.168.1.1 is the IP address of the company\u2019s firewall that connects them to the Internet. There is also a virtual host with three virtual machines running inside it.  The big red circle represents the virtual adapter to which NAT-based virtual machines connect (172.16.1.1).  You can see that there are two such virtual machines with IP addresses of 172.16.1.2 and 172.16.1.3.  When you configure a virtual machine as using NAT, it doesn\u2019t see the production network directly.  In fact, all traffic coming from the virtual machine will share the VM host\u2019s IP address.  Behind the scenes, traffic from the virtual machines is routed on the virtual host and sent out via the host\u2019s physical adapter and, eventually, to the Internet.\n\n\nbridge\n: The third virtual machine (192.168.1.3) is configured in \u201cbridged\u201d mode which basically means that the virtual network adapter in that virtual machine is bridged to the production network and that virtual machine operates as if it exists directly on the production network.  In fact, this virtual machine won\u2019t even be able to see the two NAT-based virtual machines since they\u2019re on different networks.\n\n\nRead more: \nNAT vs. bridged network: A simple diagram", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#networking", 
            "text": "", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#tcpip", 
            "text": "TCP/IP is the protocol that has run the Internet for 30 years.  How TCP/IP works   Read More   Happy 30th Anniversary, Internet and TCP/IP!!!", 
            "title": "TCP/IP"
        }, 
        {
            "location": "/networking/#p2p", 
            "text": "Peer-to-peer (P2P) computing or networking is a distributed application architecture that partitions tasks or workloads between peers. Peers are equally privileged, equipotent participants in the application. They are said to form a peer-to-peer network of nodes.   Peers make a portion of their resources, such as processing power, disk storage or network bandwidth, directly available to other network participants, without the need for central coordination by servers or stable hosts.[1] Peers are both suppliers and consumers of resources, in contrast to the traditional client-server model in which the consumption and supply of resources is divided. Emerging collaborative P2P systems are going beyond the era of peers doing similar things while sharing resources, and are looking for diverse peers that can bring in unique resources and capabilities to a virtual community thereby empowering it to engage in greater tasks beyond those that can be accomplished by individual peers, yet that are beneficial to all the peers.", 
            "title": "P2P"
        }, 
        {
            "location": "/networking/#bridge-vs-nat", 
            "text": "When you create a new virtual machine, you have one of many options when it comes to choosing your network connectivity.  Two common options are to use either bridged networking or network address translation (NAT).  So, what exactly does that look like?  Take a look at the figure below.   NAT : In this diagram, the vertical line next to the firewall represents the production network and you can see that 192.168.1.1 is the IP address of the company\u2019s firewall that connects them to the Internet. There is also a virtual host with three virtual machines running inside it.  The big red circle represents the virtual adapter to which NAT-based virtual machines connect (172.16.1.1).  You can see that there are two such virtual machines with IP addresses of 172.16.1.2 and 172.16.1.3.  When you configure a virtual machine as using NAT, it doesn\u2019t see the production network directly.  In fact, all traffic coming from the virtual machine will share the VM host\u2019s IP address.  Behind the scenes, traffic from the virtual machines is routed on the virtual host and sent out via the host\u2019s physical adapter and, eventually, to the Internet.  bridge : The third virtual machine (192.168.1.3) is configured in \u201cbridged\u201d mode which basically means that the virtual network adapter in that virtual machine is bridged to the production network and that virtual machine operates as if it exists directly on the production network.  In fact, this virtual machine won\u2019t even be able to see the two NAT-based virtual machines since they\u2019re on different networks.  Read more:  NAT vs. bridged network: A simple diagram", 
            "title": "bridge vs NAT"
        }, 
        {
            "location": "/ux/", 
            "text": "1. Design Principles\n\n\nUI Design Do\u2019s and Don\u2019ts\n\n\nAndroid Design Principles\n\n\n2. Design Trends\n\n\n2.1 Material Design \n1\n\n\ncomponents\n\n\n\n\nWe challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.\n\n\n\n\n\n\nTools\n\n\n\n\nmaterialpalette.com\n\n\nIcon: fa2png\n\n\n\n\nUI Components\n\n\n\n\nData Binding\n\n\nTransclusion\n\n\nDirective - Fragments\n\n\nMessaging\n\n\nIntent \nAndroid\n \n1\n\n\nIntents are asynchronous messages which allow application components to request functionality from other Android components. Intents allow you to interact with components from the same applications as well as with components contributed by other applications. For example, an activity can start an external activity for taking a picture.\n\n\nIntents are objects of the android.content.Intent type. Your code can send them to the Android system defining the components you are targeting. For example, via the startActivity() method you can define that the intent should be used to start an activity.\n\n\nAn intent can contain data via a Bundle. This data can be used by the receiving component.\n\n\nStyle \n Theme\n\n\nAndroid Development: Explaining Styles and Themes, https://m.youtube.com/#/watch?v=MXpG3Xq0w3A\n\n\nResponsive Design\n\n\nSupport Multi Screen \n2\n\n\n\n\n\n\n\n\n\n\nIntent Android\n\n\n\n\n\n\nSupport Multi Screen", 
            "title": "UX/UI"
        }, 
        {
            "location": "/ux/#1-design-principles", 
            "text": "UI Design Do\u2019s and Don\u2019ts  Android Design Principles", 
            "title": "1. Design Principles"
        }, 
        {
            "location": "/ux/#2-design-trends", 
            "text": "", 
            "title": "2. Design Trends"
        }, 
        {
            "location": "/ux/#21-material-design-1", 
            "text": "components   We challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.    Tools   materialpalette.com  Icon: fa2png", 
            "title": "2.1 Material Design 1"
        }, 
        {
            "location": "/ux/#ui-components", 
            "text": "", 
            "title": "UI Components"
        }, 
        {
            "location": "/ux/#data-binding", 
            "text": "", 
            "title": "Data Binding"
        }, 
        {
            "location": "/ux/#transclusion", 
            "text": "Directive - Fragments", 
            "title": "Transclusion"
        }, 
        {
            "location": "/ux/#messaging", 
            "text": "Intent  Android   1  Intents are asynchronous messages which allow application components to request functionality from other Android components. Intents allow you to interact with components from the same applications as well as with components contributed by other applications. For example, an activity can start an external activity for taking a picture.  Intents are objects of the android.content.Intent type. Your code can send them to the Android system defining the components you are targeting. For example, via the startActivity() method you can define that the intent should be used to start an activity.  An intent can contain data via a Bundle. This data can be used by the receiving component.", 
            "title": "Messaging"
        }, 
        {
            "location": "/ux/#style-theme", 
            "text": "Android Development: Explaining Styles and Themes, https://m.youtube.com/#/watch?v=MXpG3Xq0w3A", 
            "title": "Style &amp; Theme"
        }, 
        {
            "location": "/ux/#responsive-design", 
            "text": "Support Multi Screen  2      Intent Android    Support Multi Screen", 
            "title": "Responsive Design"
        }, 
        {
            "location": "/software_architecture/", 
            "text": "Service-Oriented Architecture\n\n\nA service-oriented architecture (SOA) is an architectural pattern in computer software design in which application components provide services to other components via a communications protocol, typically over a network. The principles of service-orientation are independent of any vendor, product or technology. \n2\n\n\n\n\nGenerally accepted view \n1\n\n\n\n\nBoundaries are explicit\n\n\nServices are autonomous\n\n\nServices share schema and contract, not class\n\n\nService compatibility is based on policy\n\n\n\n\nMicroservices\n\n\n\n\nIn computing, microservices is a software architecture style in which complex applications are composed of small, independent processes communicating with each other using language-agnostic APIs. These services are small building blocks, highly decoupled and focussed on doing a small task, facilitating a modular approach to system-building. One of concepts which integrates microservices as a software architecture style is dew computing. \n1\n\n\n\n\n\n\nProperties \n2\n\n\n\n\nEach running in its own process\n\n\nCommunicating with lightweight mechanisms, often an \nHTTP resource API\n\n\nBuild around \nbusiness capabilities\n\n\nIndependently deployable\n\n\nfully automated\n deployment\n\n\nMaybe in a \ndifferent programming language\n and use \ndifferent data storage\n technologies\n\n\n\n\nMonolith vs Microservice\n\n\n\n\n\n\nMonolith\n\n\nMicroservice\n\n\n\n\n\n\nSimplicity\n\n\nPartial Deployment\n\n\n\n\n\n\nConsistency\n\n\nAvailability\n\n\n\n\n\n\nInter-module refactoring\n\n\nPreserve Modularity\n\n\n\n\n\n\n\n\nMultiple Platforms\n\n\n\n\n\n\n\nBenefits \n4\n\n\n\n\nTheir small size enables developers to be most productive.\n\n\nIt's easy to comprehend and test each service.\n\n\nYou can correctly handle failure of any dependent service.\n\n\nThey reduce impact of correlated failures.\n\n\n\n\nWeb Service\n\n\nRESTful API\n\n\n\n\nREST Client\n\n\nSense (Beta)\n\n\nA JSON aware developer console to ElasticSearch.\n\n\nAPI Document and Client Generator\n\n\nhttp://swagger.io/swagger-editor/\n\n\nAPI Client\n\n\nCRUD Pet\n\n\n\n\n\n\n\n\nAPI\n\n\nClient\n\n\n\n\n\n\nMethod\n\n\nURL\n\n\nBody\n\n\nReturn Body\n\n\nMethod\n\n\n\n\n\n\nGET\n\n\n/pets\n\n\n\n\n[Pet]\n\n\nPetApi.list()\n\n\n\n\n\n\nPOST\n\n\n/pets/\n\n\nPet\n\n\nPet\n\n\nPetApi.create(pet)\n\n\n\n\n\n\nGET\n\n\n/pets/pet_id\n\n\n\n\nPet\n\n\nPetApi.get(pet_id)\n\n\n\n\n\n\nPUT\n\n\n/pets/pet_id\n\n\nPet\n\n\nPet\n\n\nPetApi.update(pet_id, pet)\n\n\n\n\n\n\nDELETE\n\n\n/pets/pet_id\n\n\n\n\n\n\nPetApi.delete(pet_id)\n\n\n\n\n\n\n\n\n\n\n\n\nCRUD Store\n\n\n\n\n\n\n\n\nGET /stores\n\n\nStoreApi.list()\n\n\n\n\n\n\n...\n\n\n...\n\n\n\n\n\n\n\n\n\nRelationships\n\n\nMany to many\n\n\n\n\n\n\n\n\nGET /stores/sotre_id/pets\n\n\nStoreApi.get_pets(store_id)\n\n\n\n\n\n\n### Example\n\n[https://api.facebook.com/method/links.getStats?urls=%%URL%%\n=json](https://api.facebook.com/method/links.getStats?urls=%%URL%%\n=json)\n\n\n\n\n\n\n\n\n\n\n\n\nMicroservices\n\n\n\n\n\n\nSlide 11/42, Micro-servies\n\n\n\n\n\n\nMartin Fowler, Microservices, youtube\n\n\n\n\n\n\nRick E. Osowski, Microservices in action, Part 1: Introduction to microservices, IBM developerworks", 
            "title": "SA"
        }, 
        {
            "location": "/software_architecture/#service-oriented-architecture", 
            "text": "A service-oriented architecture (SOA) is an architectural pattern in computer software design in which application components provide services to other components via a communications protocol, typically over a network. The principles of service-orientation are independent of any vendor, product or technology.  2", 
            "title": "Service-Oriented Architecture"
        }, 
        {
            "location": "/software_architecture/#generally-accepted-view-1", 
            "text": "Boundaries are explicit  Services are autonomous  Services share schema and contract, not class  Service compatibility is based on policy", 
            "title": "Generally accepted view 1"
        }, 
        {
            "location": "/software_architecture/#microservices", 
            "text": "In computing, microservices is a software architecture style in which complex applications are composed of small, independent processes communicating with each other using language-agnostic APIs. These services are small building blocks, highly decoupled and focussed on doing a small task, facilitating a modular approach to system-building. One of concepts which integrates microservices as a software architecture style is dew computing.  1", 
            "title": "Microservices"
        }, 
        {
            "location": "/software_architecture/#properties-2", 
            "text": "Each running in its own process  Communicating with lightweight mechanisms, often an  HTTP resource API  Build around  business capabilities  Independently deployable  fully automated  deployment  Maybe in a  different programming language  and use  different data storage  technologies", 
            "title": "Properties 2"
        }, 
        {
            "location": "/software_architecture/#monolith-vs-microservice", 
            "text": "Monolith  Microservice    Simplicity  Partial Deployment    Consistency  Availability    Inter-module refactoring  Preserve Modularity     Multiple Platforms", 
            "title": "Monolith vs Microservice"
        }, 
        {
            "location": "/software_architecture/#benefits-4", 
            "text": "Their small size enables developers to be most productive.  It's easy to comprehend and test each service.  You can correctly handle failure of any dependent service.  They reduce impact of correlated failures.", 
            "title": "Benefits 4"
        }, 
        {
            "location": "/software_architecture/#web-service", 
            "text": "", 
            "title": "Web Service"
        }, 
        {
            "location": "/software_architecture/#restful-api", 
            "text": "", 
            "title": "RESTful API"
        }, 
        {
            "location": "/software_architecture/#rest-client", 
            "text": "Sense (Beta)  A JSON aware developer console to ElasticSearch.", 
            "title": "REST Client"
        }, 
        {
            "location": "/software_architecture/#api-document-and-client-generator", 
            "text": "http://swagger.io/swagger-editor/", 
            "title": "API Document and Client Generator"
        }, 
        {
            "location": "/software_architecture/#api-client", 
            "text": "CRUD Pet     API  Client    Method  URL  Body  Return Body  Method    GET  /pets   [Pet]  PetApi.list()    POST  /pets/  Pet  Pet  PetApi.create(pet)    GET  /pets/pet_id   Pet  PetApi.get(pet_id)    PUT  /pets/pet_id  Pet  Pet  PetApi.update(pet_id, pet)    DELETE  /pets/pet_id    PetApi.delete(pet_id)      CRUD Store     GET /stores  StoreApi.list()    ...  ...     Relationships  Many to many     GET /stores/sotre_id/pets  StoreApi.get_pets(store_id)   \n\n### Example\n\n[https://api.facebook.com/method/links.getStats?urls=%%URL%% =json](https://api.facebook.com/method/links.getStats?urls=%%URL%% =json)     Microservices    Slide 11/42, Micro-servies    Martin Fowler, Microservices, youtube    Rick E. Osowski, Microservices in action, Part 1: Introduction to microservices, IBM developerworks", 
            "title": "API Client"
        }, 
        {
            "location": "/licenses/", 
            "text": "Licenses\n\n\n\n\nMore\n\n\n\n\nOpen Source Licenses\n\n\nChoose A License\n\n\nTop 20 Open Source Licenses", 
            "title": "Licenses"
        }, 
        {
            "location": "/licenses/#licenses", 
            "text": "", 
            "title": "Licenses"
        }, 
        {
            "location": "/licenses/#more", 
            "text": "Open Source Licenses  Choose A License  Top 20 Open Source Licenses", 
            "title": "More"
        }
    ]
}