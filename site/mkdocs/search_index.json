{
    "docs": [
        {
            "location": "/", 
            "text": "Computer Science\n\n\nChallenges\n\n\nProject Euler\n\n\n\n\n\n\nProject Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help\nyou arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.\n\n\nThe motivation for starting Project Euler, and its continuation, is to provide a platform for the inquiring mind to delve into unfamiliar areas and learn new concepts in a fun and recreational context.\n\n\n\n\ngithub\n\n\nKaggle\n\n\ndatayo", 
            "title": "Home"
        }, 
        {
            "location": "/#computer-science", 
            "text": "", 
            "title": "Computer Science"
        }, 
        {
            "location": "/#challenges", 
            "text": "", 
            "title": "Challenges"
        }, 
        {
            "location": "/#project-euler", 
            "text": "Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help\nyou arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.  The motivation for starting Project Euler, and its continuation, is to provide a platform for the inquiring mind to delve into unfamiliar areas and learn new concepts in a fun and recreational context.   github", 
            "title": "Project Euler"
        }, 
        {
            "location": "/#kaggle", 
            "text": "datayo", 
            "title": "Kaggle"
        }, 
        {
            "location": "/data_algorithm/", 
            "text": "Data Structures and Algorithms\n\n\nData Structures \n1\n\n\n\n\nIn computer science, a data structure is a particular way of organizing data in a computer so that it can be used efficiently. Data structures can implement one or more particular abstract data types (ADT), which are the means of specifying the contract of operations and their complexity. In comparison, a data structure is a concrete implementation of the contract provided by an ADT.\n\n\nAlgorithms \n2\n\n\n\n\nIn mathematics and computer science, an algorithm is a self-contained step-by-step set of operations to be performed. Algorithms exist that perform calculation, data processing, and automated reasoning.\n\n\nAn algorithm is an effective method that can be expressed within a finite amount of space and time and in a well-defined formal language for calculating a function. Starting from an initial state and initial input (perhaps empty), the instructions describe a computation that, when executed, proceeds through a finite number of well-defined successive states, eventually producing \"output\" and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.\n\n\nContent\n\n\n[code]\ndata structures and algorithms/\n\u251c\u2500\u2500 1. basic data structures\n\u2502   \u251c\u2500\u2500 stacks and queues\n\u2502   \u2514\u2500\u2500 linked list\n\u251c\u2500\u2500 2. basic algorithms\n\u251c\u2500\u2500 3. graph algorithms\n\u2514   \u2514\u2500\u2500 represent graph\n[/code]\n\n\nBooks \n3\n\n\n\n\nCLRS - Introduction to Algorithms, 3rd Edition - The classic comprehensive text book on algorithms. A must read at least once in programmer's career.\n\n\n\n\nD\nA: Linked List\n\n\nLinked List \n1\n\n\nIn computer science, a linked list is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence; more complex variants add additional links. This structure allows for efficient insertion or removal of elements from any position in the sequence.\n\n\nSingle Linked List\n\n\n\n\nDouble Linked List\n\n\n\n\nExercise: Book Manager\n\n\nImplement linked list to do a simple book manager program\n\n\n\n\nadd new book\n\n\nsearch book by name\n\n\nshow all book\n\n\n\n\nD\nA: Stacks and Queues\n\n\nD\nA: Graph\n\n\nData Structure: Graph\n\n\n\n\nAlgorithms\n\n\n\n\nPagerank\n\n\n\n\nExercies\n\n\n\n\n\n\n15 Project Euler\n\n\n\n\n\n\nSources\n\n\n\n\n\n\n\n\n\n\nLinked list\n\n\n\n\n\n\nAlgorithm\n\n\n\n\n\n\nWhat is the best book for algorithms and data structures?", 
            "title": "D&A"
        }, 
        {
            "location": "/data_algorithm/#data-structures-and-algorithms", 
            "text": "", 
            "title": "Data Structures and Algorithms"
        }, 
        {
            "location": "/data_algorithm/#data-structures-1", 
            "text": "In computer science, a data structure is a particular way of organizing data in a computer so that it can be used efficiently. Data structures can implement one or more particular abstract data types (ADT), which are the means of specifying the contract of operations and their complexity. In comparison, a data structure is a concrete implementation of the contract provided by an ADT.", 
            "title": "Data Structures 1"
        }, 
        {
            "location": "/data_algorithm/#algorithms-2", 
            "text": "In mathematics and computer science, an algorithm is a self-contained step-by-step set of operations to be performed. Algorithms exist that perform calculation, data processing, and automated reasoning.  An algorithm is an effective method that can be expressed within a finite amount of space and time and in a well-defined formal language for calculating a function. Starting from an initial state and initial input (perhaps empty), the instructions describe a computation that, when executed, proceeds through a finite number of well-defined successive states, eventually producing \"output\" and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.", 
            "title": "Algorithms 2"
        }, 
        {
            "location": "/data_algorithm/#content", 
            "text": "[code]\ndata structures and algorithms/\n\u251c\u2500\u2500 1. basic data structures\n\u2502   \u251c\u2500\u2500 stacks and queues\n\u2502   \u2514\u2500\u2500 linked list\n\u251c\u2500\u2500 2. basic algorithms\n\u251c\u2500\u2500 3. graph algorithms\n\u2514   \u2514\u2500\u2500 represent graph\n[/code]", 
            "title": "Content"
        }, 
        {
            "location": "/data_algorithm/#books-3", 
            "text": "CLRS - Introduction to Algorithms, 3rd Edition - The classic comprehensive text book on algorithms. A must read at least once in programmer's career.", 
            "title": "Books 3"
        }, 
        {
            "location": "/data_algorithm/#da-linked-list", 
            "text": "", 
            "title": "D&amp;A: Linked List"
        }, 
        {
            "location": "/data_algorithm/#linked-list-1", 
            "text": "In computer science, a linked list is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence; more complex variants add additional links. This structure allows for efficient insertion or removal of elements from any position in the sequence.", 
            "title": "Linked List 1"
        }, 
        {
            "location": "/data_algorithm/#single-linked-list", 
            "text": "", 
            "title": "Single Linked List"
        }, 
        {
            "location": "/data_algorithm/#double-linked-list", 
            "text": "", 
            "title": "Double Linked List"
        }, 
        {
            "location": "/data_algorithm/#exercise-book-manager", 
            "text": "Implement linked list to do a simple book manager program   add new book  search book by name  show all book", 
            "title": "Exercise: Book Manager"
        }, 
        {
            "location": "/data_algorithm/#da-stacks-and-queues", 
            "text": "", 
            "title": "D&amp;A: Stacks and Queues"
        }, 
        {
            "location": "/data_algorithm/#da-graph", 
            "text": "", 
            "title": "D&amp;A: Graph"
        }, 
        {
            "location": "/data_algorithm/#data-structure-graph", 
            "text": "", 
            "title": "Data Structure: Graph"
        }, 
        {
            "location": "/data_algorithm/#algorithms", 
            "text": "Pagerank", 
            "title": "Algorithms"
        }, 
        {
            "location": "/data_algorithm/#exercies", 
            "text": "", 
            "title": "Exercies"
        }, 
        {
            "location": "/data_algorithm/#15-project-euler", 
            "text": "", 
            "title": "15 Project Euler"
        }, 
        {
            "location": "/data_algorithm/#sources", 
            "text": "Linked list    Algorithm    What is the best book for algorithms and data structures?", 
            "title": "Sources"
        }, 
        {
            "location": "/database/", 
            "text": "Database\n\n\n![][1]\n\n\nRelational DBMS: [Oracle][2], [MySQL][3] \n(\ndownload\n)\n, [SQLite][4]\n\n\nKey-value Stores: [Redis][5], [Memcached][6]\n\n\nDocument stores: [MongoDB][7]\n\n\nGraph: [Neo4j][8]\n\n\nWide column stores: [Cassandra][9], [HBase][10]\n\n\nDesign and Modeling (a.k.a Data Definition)\n\n\n1.1 Schema \n1\n\n\nA database schema of a database system is its structure described in a formal language supported by the database management system (DBMS) and refers to the organization of data as a blueprint of how a database is constructed (divided into database tables in the case of Relational Databases). The formal definition of database schema is a set of formulas (sentences) called integrity constraints imposed on a database. These integrity constraints ensure compatibility between parts of the schema. All constraints are expressible in the same language. A database can be considered a structure in realization of the database language. The states of a created conceptual schema are transformed into an explicit mapping, the database schema. This describes how real world entities are modeled in the database.\n\n\n![][11]\n\n\n1.1.1 Type \n2\n \n3\n\n\nIn computer science and computer programming, a data type or simply type is a classification identifying one of various types of data, such as real, integer or Boolean, that determines the possible values for that type; the operations that can be done on values of that type; the meaning of the data; and the way values of that type can be stored.\n\n\nTEXT\n, \nINT\n, \nENUM\n, \nTIMESTAMP\n\n\n1.2 Cardinality (a.k.a Relationship) \n4\n\n\n![][12] \nForeign key\n, \nPrimary key\n\n\n1.2 Indexing\n\n\nA database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records. Why Indexing is important?\n\n\n![][13] \nIndexing in MySQL\n \n5\n Indexes are used to find rows with specific column values quickly. Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs. If the table has an index for the columns in question, MySQL can quickly determine the position to seek to in the middle of the data file without having to look at all the data. This is much faster than reading every row sequentially. ![][14]\n\n\nCREATE INDEX NameIndex ON Employee (name)\nSELECT * FROM Employee WHERE name = 'Ashish'\n\n\n\n\n2. Data Manipulation\n\n\nCreate - Read - Update - Delete \n6\n\n\n![][15]\n\n\n\n\nCreate or add new entries\n\n\nRead, retrieve, search, or view existing entries * Update or edit existing entries * Delete/deactivate existing entries\n\n\n\n\n/* create */\nCREATE TABLE Guests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP )\n/* create (insert) */\nINSERT INTO Guests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\n/* read */\nSELECT * FROM Guests WHERE id=1 /* update */ UPDATE Guests SET lastname='Doe' WHERE id=1\n/* delete */\nDELETE FROM Guests WHERE id=1`\n\n\n\n\n3. Data Retrieve \n Transaction\n\n\n3.1 Data Retrieve\n\n\nSELECT\n, \nWHERE\n, \nFROM\n, \nLIMIT\n, \nJOIN\n, \nGROUP BY\n, \nHAVING\n\n\nGet user id, user name and number of post of this user\n\n\nSELECT user.id, user.name, COUNT(post.*) AS posts\nFROM user LEFT OUTER JOIN post ON post.owner_id=user.id GROUP BY user.id`\n\n\n\n\nSelect user who only order one time.\n\n\nSELECT name, COUNT(name) AS c FROM orders GROUP BY name HAVING c = 1;\n\n\n\n\nCalculate the longest period (in days) that the company has gone without a hiring or firing anyone.\n\n\nSELECT x.date, MIN(y.date) y_date, DATEDIFF(MIN(y.date),x.date) days\nFROM ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees ) x\nJOIN ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees UNION SELECT CURDATE()) y\nON y.date \n x.date GROUP BY x.date ORDER BY days DESC LIMIT 1;\n\n\n\n\nData Retrieve API\n\n\n\n\n\n\n\n\nAPI\n\n\nDescription\n\n\n\n\n\n\nget\n\n\nget single item\n\n\n\n\n\n\n\n\nGet dog by id\n\n\nDog.get(1)\n\n\n\n\n\n\n\n\nfind\n\n\n\n\nfind items\n\n\n@see\ncollection.find()\n\n\n\n\n\n\n\n\n\n\nFind dog name \"Max\"\n\n\n Dog.find({\"name\": \"Max\"})\n\n\n\n\n\n\n\n\nsort\n\n\n\n\nsort items\n\n\n@see\ncursor.sort\n\n\n\n\n\n\n\n\n\n\nGet 10 older dogs\n\n\nDog.find().sort(\"age\", {limit: 10})\n\n\n\n\n\n\n\n\naggregate\n\n\n\n\nsum, min, max items\n\n\n@see\ncollection.aggregate\n\n\n\n\n\n\n\n\n\n\nGet sum of dogs' age\n\n\nDog.find().aggregate({\n  \"sum_age\":  {\n     $sum: \"age\"\n   }\n})\n\n\n\n\n\n\n\n\n\n\n\n3.2 Transaction\n\n\nA transaction symbolizes a unit of work performed within a database management system (or similar system) against a database, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in database. Example: Transfer 900$ from Account\n\n\nBob\n to \nAlice\n \n7\n\n\nstart transaction\nselect balance from Account where Account_Number='Bob';\nselect balance from Account where Account_Number='Alice';\nupdate Account set balance=balance-900 here Account_Number='Bob' ;\nupdate Account set balance=balance+900 here Account_Number='Alice' ;\ncommit; //if all sql queries succed rollback; //if any of Sql queries failed or error\n\n\n\n\nACID Properties\n \n8\n\n\nIn computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties that guarantee that database transactions are processed reliably. In the context of databases, a single logical operation on the data is called a transaction.\n\n\nFor example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction. ![][16]\n\n\n4. Backup and Restore \n9\n\n\nSometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when the database is found corrupted due to a software error, or if it has been updated with erroneous data). To achieve this a backup operation is done occasionally or continuously, where each desired database state (i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backup files (many techniques exist to do this effectively). When this state is needed, i.e., when it is decided by a database administrator to bring the database back to this state (e.g., by specifying this state by a desired point in time when the database was in this state), these files are utilized to restore that state.\n\n\n5. Migration \n10\n\n\nIn software engineering, schema migration (also database migration, database change management) refers to the management of incremental, reversible changes to relational database schemas. A schema migration is performed on a database whenever it is necessary to update or revert that database's schema to some newer or older version. Example: Android Migration by droid-migrate\n\n\n11\n\n\ndroid-migrate init -d my_database droid-migrate generate up droid-migrate generate down\n\n\n\n\nExample: Database Seeding with Laravel \n12\n \nshell php artisan migrate:make seed_roles_table php artisan migrate:make seed_users_table php artisan migrate:reset php artisan db:seed\n\n\n6. Active record pattern | Object-Relational Mapping (ORM) \n13\n\n\nObject-relational mapping in computer science is a programming technique for converting data between incompatible type systems in object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language. There are both free and commercial packages available that perform object-relational mapping, although some programmers opt to create their own ORM tools.\n\n\n![][17] \nExample\n\n\nphp\n \n14\n\n\n$employee = new Employee(); $employee-\nsetName(\nJoe\n); $employee-\nsave();\n[/code]\n\n`Android` \nsup id=\nfnref-2159-10\na href=\n#fn-2159-10\n rel=\nfootnote\n15\n/a\n/sup\n\n\n```java\npublic class User {\n  @DatabaseField(id = true) String username;\n  @DatabaseField String password;\n  @DatabaseField String email;\n  @DatabaseField String alias;\n  public User() {} }\n\n\n\n\nImplementations\n\n\n\n\nAndroid: [ormlite-android][18] \n16\n\n\nPHP: [Eloquent][19]\n\n\n\n\n\n  \nDatabase schema\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nData type\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nSQL Data Types for Various DBs\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nCardinality (data modeling)\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nHow MySQL Uses Indexes\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nCreate, read, update and delete\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nDatabase Transaction Tutorial in SQL with Example for Beginners\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nACID\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nDatabase\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nSchema migration\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \naglover/droid-migrate\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nDatabase Seeding with Laravel\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nObject-relational mapping\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nObject Relational Mapping in PHP\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \nAn Android Repository with ORMLite (Using an existing SQLite database)\n\u00a0\n\u21a9\n\n\n\n\n\n\n  \n5 of the Best Android ORMs\n\u00a0\n\u21a9\n \n\n  \n\n\n[1]: http://www.netsolutionsindia.com/blog/wp-content/uploads/2014/07/Mongodb-Nosql.jpg\n[2]: http://www.oracle.com/index.html\n[3]: http://www.mysql.com/\n[4]: http://sqlite.org/\n[5]: http://redis.io/\n[6]: http://memcached.org/\n[7]: https://www.mongodb.org/\n[8]: http://neo4j.com/\n[9]: http://cassandra.apache.org/\n[10]: http://hbase.apache.org/\n[11]: http://i.imgur.com/uEuEdPv.png\n[12]: http://i.stack.imgur.com/Z6tTL.gif\n[13]: http://cdn.guru99.com/images/Index.jpg\n[14]: http://image.slidesharecdn.com/mysqlindex-091118043907-phpapp02/95/indexing-the-mysql-index-key-to-performance-tuning-17-638.jpg?cb=1357187786\n[15]: https://www.pingidentity.com/content/dam/pic/images/glyphs/22_Capabilities_UserProvisioningDeprovisioning_b3_r.png\n[16]: https://lh6.googleusercontent.com/y9qoNuNGdd9COo0twXUrefyy6ZKmRs3iFPIMKpJ7UZRXqX7Bc5lXFutzaKLFf0ZPD4Sl7uDj1CvQoCh2kOd9ZNkKokw_-xZ-QUwX8mWkKDexO0I58Oo\n[17]: https://symfony-docs-chs.readthedocs.org/en/latest/_images/doctrine_image_1.png\n[18]: https://github.com/j256/ormlite-android\n[19]: http://laravel.com/docs/4.2/eloquent", 
            "title": "Introduction"
        }, 
        {
            "location": "/database/#database", 
            "text": "![][1]  Relational DBMS: [Oracle][2], [MySQL][3]  ( download ) , [SQLite][4]  Key-value Stores: [Redis][5], [Memcached][6]  Document stores: [MongoDB][7]  Graph: [Neo4j][8]  Wide column stores: [Cassandra][9], [HBase][10]", 
            "title": "Database"
        }, 
        {
            "location": "/database/#design-and-modeling-aka-data-definition", 
            "text": "", 
            "title": "Design and Modeling (a.k.a Data Definition)"
        }, 
        {
            "location": "/database/#1461-schema-1", 
            "text": "A database schema of a database system is its structure described in a formal language supported by the database management system (DBMS) and refers to the organization of data as a blueprint of how a database is constructed (divided into database tables in the case of Relational Databases). The formal definition of database schema is a set of formulas (sentences) called integrity constraints imposed on a database. These integrity constraints ensure compatibility between parts of the schema. All constraints are expressible in the same language. A database can be considered a structure in realization of the database language. The states of a created conceptual schema are transformed into an explicit mapping, the database schema. This describes how real world entities are modeled in the database.  ![][11]", 
            "title": "1.1 Schema 1"
        }, 
        {
            "location": "/database/#12-cardinality-aka-relationship-4", 
            "text": "![][12]  Foreign key ,  Primary key", 
            "title": "1.2 Cardinality (a.k.a Relationship) 4"
        }, 
        {
            "location": "/database/#1462-indexing", 
            "text": "A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records. Why Indexing is important?  ![][13]  Indexing in MySQL   5  Indexes are used to find rows with specific column values quickly. Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs. If the table has an index for the columns in question, MySQL can quickly determine the position to seek to in the middle of the data file without having to look at all the data. This is much faster than reading every row sequentially. ![][14]  CREATE INDEX NameIndex ON Employee (name)\nSELECT * FROM Employee WHERE name = 'Ashish'", 
            "title": "1.2 Indexing"
        }, 
        {
            "location": "/database/#2-data-manipulation", 
            "text": "", 
            "title": "2. Data Manipulation"
        }, 
        {
            "location": "/database/#create-read-update-delete-6", 
            "text": "![][15]   Create or add new entries  Read, retrieve, search, or view existing entries * Update or edit existing entries * Delete/deactivate existing entries   /* create */\nCREATE TABLE Guests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP )\n/* create (insert) */\nINSERT INTO Guests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\n/* read */\nSELECT * FROM Guests WHERE id=1 /* update */ UPDATE Guests SET lastname='Doe' WHERE id=1\n/* delete */\nDELETE FROM Guests WHERE id=1`", 
            "title": "Create - Read - Update - Delete 6"
        }, 
        {
            "location": "/database/#3-data-retrieve-transaction", 
            "text": "", 
            "title": "3. Data Retrieve &amp; Transaction"
        }, 
        {
            "location": "/database/#31-data-retrieve", 
            "text": "SELECT ,  WHERE ,  FROM ,  LIMIT ,  JOIN ,  GROUP BY ,  HAVING  Get user id, user name and number of post of this user  SELECT user.id, user.name, COUNT(post.*) AS posts\nFROM user LEFT OUTER JOIN post ON post.owner_id=user.id GROUP BY user.id`  Select user who only order one time.  SELECT name, COUNT(name) AS c FROM orders GROUP BY name HAVING c = 1;  Calculate the longest period (in days) that the company has gone without a hiring or firing anyone.  SELECT x.date, MIN(y.date) y_date, DATEDIFF(MIN(y.date),x.date) days\nFROM ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees ) x\nJOIN ( SELECT hiredate date FROM employees UNION SELECT terminationdate FROM employees UNION SELECT CURDATE()) y\nON y.date   x.date GROUP BY x.date ORDER BY days DESC LIMIT 1;  Data Retrieve API     API  Description    get  get single item     Get dog by id  Dog.get(1)     find   find items  @see collection.find()      Find dog name \"Max\"   Dog.find({\"name\": \"Max\"})     sort   sort items  @see cursor.sort      Get 10 older dogs  Dog.find().sort(\"age\", {limit: 10})     aggregate   sum, min, max items  @see collection.aggregate      Get sum of dogs' age  Dog.find().aggregate({\n  \"sum_age\":  {\n     $sum: \"age\"\n   }\n})", 
            "title": "3.1 Data Retrieve"
        }, 
        {
            "location": "/database/#32-transaction", 
            "text": "A transaction symbolizes a unit of work performed within a database management system (or similar system) against a database, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in database. Example: Transfer 900$ from Account  Bob  to  Alice   7  start transaction\nselect balance from Account where Account_Number='Bob';\nselect balance from Account where Account_Number='Alice';\nupdate Account set balance=balance-900 here Account_Number='Bob' ;\nupdate Account set balance=balance+900 here Account_Number='Alice' ;\ncommit; //if all sql queries succed rollback; //if any of Sql queries failed or error  ACID Properties   8  In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties that guarantee that database transactions are processed reliably. In the context of databases, a single logical operation on the data is called a transaction.  For example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction. ![][16]", 
            "title": "3.2 Transaction"
        }, 
        {
            "location": "/database/#446-backup-and-restore-9", 
            "text": "Sometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when the database is found corrupted due to a software error, or if it has been updated with erroneous data). To achieve this a backup operation is done occasionally or continuously, where each desired database state (i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backup files (many techniques exist to do this effectively). When this state is needed, i.e., when it is decided by a database administrator to bring the database back to this state (e.g., by specifying this state by a desired point in time when the database was in this state), these files are utilized to restore that state.", 
            "title": "4. Backup and Restore 9"
        }, 
        {
            "location": "/database/#546-migration-10", 
            "text": "In software engineering, schema migration (also database migration, database change management) refers to the management of incremental, reversible changes to relational database schemas. A schema migration is performed on a database whenever it is necessary to update or revert that database's schema to some newer or older version. Example: Android Migration by droid-migrate  11  droid-migrate init -d my_database droid-migrate generate up droid-migrate generate down  Example: Database Seeding with Laravel  12   shell php artisan migrate:make seed_roles_table php artisan migrate:make seed_users_table php artisan migrate:reset php artisan db:seed", 
            "title": "5. Migration 10"
        }, 
        {
            "location": "/database/#646-active-record-pattern-object-relational-mapping-orm-13", 
            "text": "Object-relational mapping in computer science is a programming technique for converting data between incompatible type systems in object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language. There are both free and commercial packages available that perform object-relational mapping, although some programmers opt to create their own ORM tools.  ![][17]  Example  php   14  $employee = new Employee(); $employee- setName( Joe ); $employee- save();\n[/code]\n\n`Android`  sup id= fnref-2159-10 a href= #fn-2159-10  rel= footnote 15 /a /sup \n\n```java\npublic class User {\n  @DatabaseField(id = true) String username;\n  @DatabaseField String password;\n  @DatabaseField String email;\n  @DatabaseField String alias;\n  public User() {} }  Implementations   Android: [ormlite-android][18]  16  PHP: [Eloquent][19]   \n   Database schema \u00a0 \u21a9   \n   Data type \u00a0 \u21a9   \n   SQL Data Types for Various DBs \u00a0 \u21a9   \n   Cardinality (data modeling) \u00a0 \u21a9   \n   How MySQL Uses Indexes \u00a0 \u21a9   \n   Create, read, update and delete \u00a0 \u21a9   \n   Database Transaction Tutorial in SQL with Example for Beginners \u00a0 \u21a9   \n   ACID \u00a0 \u21a9   \n   Database \u00a0 \u21a9   \n   Schema migration \u00a0 \u21a9   \n   aglover/droid-migrate \u00a0 \u21a9   \n   Database Seeding with Laravel \u00a0 \u21a9   \n   Object-relational mapping \u00a0 \u21a9   \n   Object Relational Mapping in PHP \u00a0 \u21a9   \n   An Android Repository with ORMLite (Using an existing SQLite database) \u00a0 \u21a9   \n   5 of the Best Android ORMs \u00a0 \u21a9   \n   \n\n[1]: http://www.netsolutionsindia.com/blog/wp-content/uploads/2014/07/Mongodb-Nosql.jpg\n[2]: http://www.oracle.com/index.html\n[3]: http://www.mysql.com/\n[4]: http://sqlite.org/\n[5]: http://redis.io/\n[6]: http://memcached.org/\n[7]: https://www.mongodb.org/\n[8]: http://neo4j.com/\n[9]: http://cassandra.apache.org/\n[10]: http://hbase.apache.org/\n[11]: http://i.imgur.com/uEuEdPv.png\n[12]: http://i.stack.imgur.com/Z6tTL.gif\n[13]: http://cdn.guru99.com/images/Index.jpg\n[14]: http://image.slidesharecdn.com/mysqlindex-091118043907-phpapp02/95/indexing-the-mysql-index-key-to-performance-tuning-17-638.jpg?cb=1357187786\n[15]: https://www.pingidentity.com/content/dam/pic/images/glyphs/22_Capabilities_UserProvisioningDeprovisioning_b3_r.png\n[16]: https://lh6.googleusercontent.com/y9qoNuNGdd9COo0twXUrefyy6ZKmRs3iFPIMKpJ7UZRXqX7Bc5lXFutzaKLFf0ZPD4Sl7uDj1CvQoCh2kOd9ZNkKokw_-xZ-QUwX8mWkKDexO0I58Oo\n[17]: https://symfony-docs-chs.readthedocs.org/en/latest/_images/doctrine_image_1.png\n[18]: https://github.com/j256/ormlite-android\n[19]: http://laravel.com/docs/4.2/eloquent", 
            "title": "6. Active record pattern | Object-Relational Mapping (ORM) 13"
        }, 
        {
            "location": "/db_sql/", 
            "text": "SQL\n\n\n\n  SELECT * FROM WORLD\n\n\n\n\n\n\n\n  INSERT INTO\n\n\n\n\n\n\n\n\nSELECT * FROM girls", 
            "title": "SQL"
        }, 
        {
            "location": "/db_sql/#sql", 
            "text": "SELECT * FROM WORLD   \n  INSERT INTO    SELECT * FROM girls", 
            "title": "SQL"
        }, 
        {
            "location": "/db_mysql/", 
            "text": "MySQL\n\n\n\n\nMySQL is an open-source relational database management system (RDBMS); in July 2013, it was the world's second most widely used RDBMS, and the most widely used open-source client\u2013server model RDBMS. It is named after co-founder Michael Widenius's daughter, My. The SQL abbreviation stands for Structured Query Language. The MySQL development project has made its source code available under the terms of the GNU General Public License, as well as under a variety of proprietary agreements. MySQL was owned and sponsored by a single for-profit firm, the Swedish company MySQL AB, now owned by Oracle Corporation. For proprietary use, several paid editions are available, and offer additional functionality.\n\n\nMySQL: Docker\n\n\nDocker Run\n\n\ndocker pull mysql\ndocker run -d \\\n  -p 3306:3306 \\\n  --env MYSQL_ROOT_PASSWORD=docker \\\n  --env MYSQL_DATABASE=docker \\\n  --env MYSQL_USER=docker \\\n  --env MYSQL_PASSWORD=docker \\\n  mysql\n\n\n\n\nNote: On Windows, view your \n0.0.0.0\n IP by running below command line (or you can turn on Kitematic to view ip)\n\n\nDocker Compoose\n\n\nStep 1\n: Clone Docker Project\n\n\ngit clone https://github.com/magizbox/docker-mysql.git\nmv docker-mysql mysql\n\n\n\n\nStep 2\n: Docker Compose\n\n\nversion: \n2\n\n\nservices:\n mysql:\n  build: ./mysql/.\n  ports:\n   - 3306:3306\n  environment:\n   - MYSQL_ROOT_PASSWORD=docker\n   - MYSQL_DATABASE=docker\n   - MYSQL_USER=docker\n   - MYSQL_PASSWORD=docker\n  volumes:\n   - ./data/mysql:/var/lib/mysql\n\n\n\n\nDocker Folder\n\n\nmysql/\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 my.cnf\n\u2514\u2500\u2500 Dockerfile\n\n\n\n\nVerify\n\n\ndocker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM\ndefault   *        virtualbox   Running   tcp://192.168.99.100:2376\n\n\n\n\nYou can add phpmyadmin to see mysql works\n\n\n phpmyadmin:\n  image: phpmyadmin/phpmyadmin\n  links:\n   - mysql\n  environment:\n   - PMA_ARBITRARY=1\n  ports:\n   - 80:80\n\n\n\n\nSee it works\n\n\n\n\nGo to localhost\n\n\nLogin with Server=mysql, Username=docker, Password=docker", 
            "title": "MySQL"
        }, 
        {
            "location": "/db_mysql/#mysql", 
            "text": "MySQL is an open-source relational database management system (RDBMS); in July 2013, it was the world's second most widely used RDBMS, and the most widely used open-source client\u2013server model RDBMS. It is named after co-founder Michael Widenius's daughter, My. The SQL abbreviation stands for Structured Query Language. The MySQL development project has made its source code available under the terms of the GNU General Public License, as well as under a variety of proprietary agreements. MySQL was owned and sponsored by a single for-profit firm, the Swedish company MySQL AB, now owned by Oracle Corporation. For proprietary use, several paid editions are available, and offer additional functionality.", 
            "title": "MySQL"
        }, 
        {
            "location": "/db_mysql/#mysql-docker", 
            "text": "", 
            "title": "MySQL: Docker"
        }, 
        {
            "location": "/db_mysql/#docker-run", 
            "text": "docker pull mysql\ndocker run -d \\\n  -p 3306:3306 \\\n  --env MYSQL_ROOT_PASSWORD=docker \\\n  --env MYSQL_DATABASE=docker \\\n  --env MYSQL_USER=docker \\\n  --env MYSQL_PASSWORD=docker \\\n  mysql  Note: On Windows, view your  0.0.0.0  IP by running below command line (or you can turn on Kitematic to view ip)", 
            "title": "Docker Run"
        }, 
        {
            "location": "/db_mysql/#docker-compoose", 
            "text": "Step 1 : Clone Docker Project  git clone https://github.com/magizbox/docker-mysql.git\nmv docker-mysql mysql  Step 2 : Docker Compose  version:  2 \n\nservices:\n mysql:\n  build: ./mysql/.\n  ports:\n   - 3306:3306\n  environment:\n   - MYSQL_ROOT_PASSWORD=docker\n   - MYSQL_DATABASE=docker\n   - MYSQL_USER=docker\n   - MYSQL_PASSWORD=docker\n  volumes:\n   - ./data/mysql:/var/lib/mysql", 
            "title": "Docker Compoose"
        }, 
        {
            "location": "/db_mysql/#docker-folder", 
            "text": "mysql/\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 my.cnf\n\u2514\u2500\u2500 Dockerfile", 
            "title": "Docker Folder"
        }, 
        {
            "location": "/db_mysql/#verify", 
            "text": "docker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM\ndefault   *        virtualbox   Running   tcp://192.168.99.100:2376  You can add phpmyadmin to see mysql works   phpmyadmin:\n  image: phpmyadmin/phpmyadmin\n  links:\n   - mysql\n  environment:\n   - PMA_ARBITRARY=1\n  ports:\n   - 80:80  See it works   Go to localhost  Login with Server=mysql, Username=docker, Password=docker", 
            "title": "Verify"
        }, 
        {
            "location": "/db_redis/", 
            "text": "Redis\n\n\n\n\nRedis is an open source (BSD licensed), in-memory data structure store, used as database, cache and message broker. \n1\n\n\nIt supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries.\n\n\nRedis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.\n\n\nRedis: Client\n\n\nPython Client\n\n\npipy/redis\n\n\nInstallation\n\n\npip install redis\n\n\n\n\nUsage\n\n\nimport redis\nr = redis.StrictRedis(host='localhost', port=6379, db=0)\nr.set('foo', 'bar')\n-\n True\n\nr.get('foo')\n-\n 'bar'\n\nr.delete('foo')\n\n# after delete\nr.get('foo')\n-\n None\n\n\n\n\nJava Client\n\n\nhttps://redislabs.com/redis-java\n\n\nRedis: Docker\n\n\nDocker Run\n\n\ndocker run -d -p 6379:6379 redis\n\n\n\n\nDocker Compose\n\n\nversion: \n2\n\n\nservices:\n redis:\n  image: redis\n  ports:\n   - 6379:6379\n\n\n\n\n\n\n\n\n\n\n\n\nRedis.io", 
            "title": "Redis"
        }, 
        {
            "location": "/db_redis/#redis", 
            "text": "Redis is an open source (BSD licensed), in-memory data structure store, used as database, cache and message broker.  1  It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries.  Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.", 
            "title": "Redis"
        }, 
        {
            "location": "/db_redis/#redis-client", 
            "text": "", 
            "title": "Redis: Client"
        }, 
        {
            "location": "/db_redis/#python-client", 
            "text": "pipy/redis  Installation  pip install redis  Usage  import redis\nr = redis.StrictRedis(host='localhost', port=6379, db=0)\nr.set('foo', 'bar')\n-  True\n\nr.get('foo')\n-  'bar'\n\nr.delete('foo')\n\n# after delete\nr.get('foo')\n-  None", 
            "title": "Python Client"
        }, 
        {
            "location": "/db_redis/#java-client", 
            "text": "https://redislabs.com/redis-java", 
            "title": "Java Client"
        }, 
        {
            "location": "/db_redis/#redis-docker", 
            "text": "", 
            "title": "Redis: Docker"
        }, 
        {
            "location": "/db_redis/#docker-run", 
            "text": "docker run -d -p 6379:6379 redis", 
            "title": "Docker Run"
        }, 
        {
            "location": "/db_redis/#docker-compose", 
            "text": "version:  2 \n\nservices:\n redis:\n  image: redis\n  ports:\n   - 6379:6379      Redis.io", 
            "title": "Docker Compose"
        }, 
        {
            "location": "/networking/", 
            "text": "Networking\n\n\nTCP/IP\n\n\nTCP/IP is the protocol that has run the Internet for 30 years.\n\n\n\nHow TCP/IP works\n\n\n\n\nRead More\n\n\n\n\nHappy 30th Anniversary, Internet and TCP/IP!!!\n\n\n\n\nP2P\n\n\nPeer-to-peer (P2P) computing or networking is a distributed application architecture that partitions tasks or workloads between peers. Peers are equally privileged, equipotent participants in the application. They are said to form a peer-to-peer network of nodes.\n\n\n\n\nPeers make a portion of their resources, such as processing power, disk storage or network bandwidth, directly available to other network participants, without the need for central coordination by servers or stable hosts.[1] Peers are both suppliers and consumers of resources, in contrast to the traditional client-server model in which the consumption and supply of resources is divided. Emerging collaborative P2P systems are going beyond the era of peers doing similar things while sharing resources, and are looking for diverse peers that can bring in unique resources and capabilities to a virtual community thereby empowering it to engage in greater tasks beyond those that can be accomplished by individual peers, yet that are beneficial to all the peers.\n\n\nbridge vs NAT\n\n\nWhen you create a new virtual machine, you have one of many options when it comes to choosing your network connectivity.  Two common options are to use either bridged networking or network address translation (NAT).  So, what exactly does that look like?  Take a look at the figure below.\n\n\n\n\nNAT\n: In this diagram, the vertical line next to the firewall represents the production network and you can see that 192.168.1.1 is the IP address of the company\u2019s firewall that connects them to the Internet. There is also a virtual host with three virtual machines running inside it.  The big red circle represents the virtual adapter to which NAT-based virtual machines connect (172.16.1.1).  You can see that there are two such virtual machines with IP addresses of 172.16.1.2 and 172.16.1.3.  When you configure a virtual machine as using NAT, it doesn\u2019t see the production network directly.  In fact, all traffic coming from the virtual machine will share the VM host\u2019s IP address.  Behind the scenes, traffic from the virtual machines is routed on the virtual host and sent out via the host\u2019s physical adapter and, eventually, to the Internet.\n\n\nbridge\n: The third virtual machine (192.168.1.3) is configured in \u201cbridged\u201d mode which basically means that the virtual network adapter in that virtual machine is bridged to the production network and that virtual machine operates as if it exists directly on the production network.  In fact, this virtual machine won\u2019t even be able to see the two NAT-based virtual machines since they\u2019re on different networks.\n\n\nRead more: \nNAT vs. bridged network: A simple diagram", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#networking", 
            "text": "", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#tcpip", 
            "text": "TCP/IP is the protocol that has run the Internet for 30 years.  How TCP/IP works   Read More   Happy 30th Anniversary, Internet and TCP/IP!!!", 
            "title": "TCP/IP"
        }, 
        {
            "location": "/networking/#p2p", 
            "text": "Peer-to-peer (P2P) computing or networking is a distributed application architecture that partitions tasks or workloads between peers. Peers are equally privileged, equipotent participants in the application. They are said to form a peer-to-peer network of nodes.   Peers make a portion of their resources, such as processing power, disk storage or network bandwidth, directly available to other network participants, without the need for central coordination by servers or stable hosts.[1] Peers are both suppliers and consumers of resources, in contrast to the traditional client-server model in which the consumption and supply of resources is divided. Emerging collaborative P2P systems are going beyond the era of peers doing similar things while sharing resources, and are looking for diverse peers that can bring in unique resources and capabilities to a virtual community thereby empowering it to engage in greater tasks beyond those that can be accomplished by individual peers, yet that are beneficial to all the peers.", 
            "title": "P2P"
        }, 
        {
            "location": "/networking/#bridge-vs-nat", 
            "text": "When you create a new virtual machine, you have one of many options when it comes to choosing your network connectivity.  Two common options are to use either bridged networking or network address translation (NAT).  So, what exactly does that look like?  Take a look at the figure below.   NAT : In this diagram, the vertical line next to the firewall represents the production network and you can see that 192.168.1.1 is the IP address of the company\u2019s firewall that connects them to the Internet. There is also a virtual host with three virtual machines running inside it.  The big red circle represents the virtual adapter to which NAT-based virtual machines connect (172.16.1.1).  You can see that there are two such virtual machines with IP addresses of 172.16.1.2 and 172.16.1.3.  When you configure a virtual machine as using NAT, it doesn\u2019t see the production network directly.  In fact, all traffic coming from the virtual machine will share the VM host\u2019s IP address.  Behind the scenes, traffic from the virtual machines is routed on the virtual host and sent out via the host\u2019s physical adapter and, eventually, to the Internet.  bridge : The third virtual machine (192.168.1.3) is configured in \u201cbridged\u201d mode which basically means that the virtual network adapter in that virtual machine is bridged to the production network and that virtual machine operates as if it exists directly on the production network.  In fact, this virtual machine won\u2019t even be able to see the two NAT-based virtual machines since they\u2019re on different networks.  Read more:  NAT vs. bridged network: A simple diagram", 
            "title": "bridge vs NAT"
        }, 
        {
            "location": "/oop/", 
            "text": "OOP\n\n\n\n  Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which are data structures that contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. A distinguishing feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated (objects have a notion of \"this\" or \"self\"). In OO programming, computer programs are designed by making them out of objects that interact with one another.[1][2] There is significant diversity in object-oriented programming, but most popular languages are class-based, meaning that objects are instances of classes, which typically also determines their type.\n\n\n\n\n1. A First Look\n\n\nProcedural vs Object Oriented\n \n1\n\n\n\n\nProcedural Approach\n\n\n\n\nFocus is on procedures\n\n\nAll data is shared: no protection\n\n\nMore difficult to modify\n\n\nHard to manage complexity\n\n\n\n\n\nAdvantages of Object Orientation\n\n\n\n\nPeople think in terms of object\n\n\nOO models map to reality \n\n\nOO models are: Easy to develop \n Easy to understand.\n\n\n\n\n\n2. Principles\n\n\nencapsulation\n, \ninheritance\n, \nabstraction\n, \npolymorphism\n \n2\n\n\n\nFundamental Principles of OOP In order for a programming language to be object-oriented, it has to enable working with classes and objects as well as the implementation and use of the fundamental object-oriented principles and concepts: inheritance, abstraction, encapsulation and polymorphism.\n\n\n2.1 Encapsulation\n \n3\n \n4\n \n5\n\n\nEncapsulation is the packing of data and functions into a single component. The features of encapsulation are supported using classes in most object-oriented programming languages, although other alternatives also exist. It allows selective hiding of properties and methods in an object by building an impenetrable wall to protect the code from accidental corruption.\n\n\n\n\nWhat it do?\n We will learn to hide unnecessary details in our classes and provide a clear and simple interface for working with them.\n\n\n\n\n\n\n\nExample\n: A popular example you\u2019ll hear for encapsulation is driving a car. Do you need to know exactly how every aspect of a car works (engine, carburettor, alternator, and so on)? No - you need to know how to use the steering wheel, brakes, accelerator, and so on.\n\n\n\n2.2 Inheritance\n \n6\n \n7\n\n\nInheritance is when an object or class is based on another object (prototypal inheritance) or class (class-based inheritance), using the same implementation (inheriting from an object or class) specifying implementation to maintain the same behavior (realizing an interface; inheriting behavior).\n\n\n\n\ninherit everything, add data or functionality, override functions, super\n\n\n\n\n\n\nWhat it do?\n We will explain how class hierarchies improve code readability and enable the reuse of functionality.\n\n\n\n\n\n\n\nExample\n: A real-world example of inheritance is genetic inheritance. We all receive genes from both our parents that then define who we are. We share qualities of both our parents, and yet at the same time are different from them.\n\n\n\n\n\n\n\nExample\n: we might classify different kinds of vehicles according to the inheritance hierarchy. Moving down the hierarchy, each kind of vehicle is both more specialized than its parent (and all of its ancestors) and more general than its children (and all of its descendants). A wheeled vehicle inherits properties common to all vehicles (it holds one or more people and carries them from place to place) but has an additional property that makes it more specialized (it has wheels). A car inherits properties common to all wheeled vehicles, but has additional, more specialized properties (four wheels, an engine, a body, and so forth). The inheritance relationship can be viewed as an is-a relationship. In this relationship, the objects become more specialized the lower in the hierarchy you go.\n\n\n\n\n\n\nLook at the image above you will get a point.\n8\n Yes, the derived class can access base class properties and still the derived class has its own properties.\n\n\n\n2.3 Abstraction\n\n\nIn computer science, abstraction is a technique for managing complexity of computer systems. It works by establishing a level of complexity on which a person interacts with the system, suppressing the more complex details below the current level. The programmer works with an idealized interface (usually well defined) and can add additional levels of functionality that would otherwise be too complex to handle.\n\n\n\n\nWhat it do?\n We will learn how to work through abstractions: to deal with objects considering their important characteristics and ignore all other details.\n\n\n\n\n\n\n\nExample\n: You'll never buy a \"device\", but always buy something more specific : iPhone, Samsung Galaxy, Nokia 3310... Here, iPhone, Samsung Galaxy and Nokia 3310 are concrete things, device is abstract.\n\n\n\n2.4 Polymorphism\n \n9\n\n\nPolymorphism is the provision of a single interface to entities of different types. A polymorphic type is one whose operations can also be applied to values of some other type, or types.\n\n\n\n\nWhat it do?\n We will explain how to work in the same manner with different objects, which define a specific implementation of some abstract behavior.\n\n\n\n\n\n\n\nExample\n: All animal can speak, but dogs woof, cats meow, and ducks quack\n\n\n\nThere are two types of polymorphism\n\n\n\n\n\n\nOverloading (compile time polymorphism): methods have the same name but different parameters.\n\n\nOverriding (run time polymorphism): the implementation given in base class is replaced with that in sub class.\n\n\n\n\n\n\n\n\n\nExample\n \n10\n: Let us Consider Car example for discussing the polymorphism. Take any brand like Ford, Honda, Toyota, BMW, Benz etc., Everything is  of type Car.\nBut each have their own advanced features and more advanced technology involved in their move behavior.\n\n\n\n3. Concepts\n\n\nLearn Object Oriented Programming though \nMario Game\n\n\n[embed]https://www.youtube.com/watch?v=HBbzYKMfx5Y[/embed]\n\n\nHow Mario get \n1up\n\n\n\n\n3.1. Object\n \n11\n\n\n\n  Objects are key to understanding object-oriented technology. Look around right now and you'll find many examples of real-world objects: your dog, your desk, your television set, your bicycle.\n\n\n\n\nIn mario world, \nMario is an object.\n\n\n Goomba is an object. \n Koopa is also an object. Even a coin\n and a pile \n are objects\n\n\n\n\n  Software objects are conceptually similar to real-world objects: they too consist of \nstate\n and related \nbehavior\n.\n\n  An object stores its \nstate\n in \nfields\n (variables in some programming languages) and exposes its \nbehavior\n through \nmethods\n (functions in some programming languages). Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication. Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation \u2014 a fundamental principle of object-oriented programming.\n\n\n\n\nIn Mario world, \nMario \n has some fields like position (which indicate where Mario stands), state (which indicate whether Mario alive), and some methods like walk \n, fire or jump.\n\n\n\n\nGoomba \n has some fields like position (which indicate where Goomba stands), state (which indicate whether Goomba die), and direction (which indicate the direction Goomba moves). Goomba has move method, and jumped_on method (which occurs when it is jumped on by Mario) (Poor Goomba!)\n\n\n\nMario Objects, real scene\n\n\n\n3.2 Class\n \n12\n\n\n\n\nIn the real world, you'll often find many individual objects all of the same kind. There may be thousands of other bicycles in existence, all of the same make and model. Each bicycle was built from the same set of blueprints and therefore contains the same components. In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles. A class is the blueprint from which individual objects are created.\n\n\n\n\nIn Mario world, each coin object come from Coin class, and every Koomba come from Koomba class\n\n\n\n\n3.3. Inheritance\n \n13\n\n\n\n\nInheritance is a mechanism in OOP to design two or more entities that are different but share many common features.\n\n\n\n\n\n\nFeature common to all classes are defined in the \nsuperclass\n\n\nThe classes that inherit common features from the \nsuperclass\n are called \nsubclasses\n\n\n\n\nIn Mario World, \nGoomba\n and \nKoopa\n is in\n\n\n\nAND MANY, MANY MORE\n\n\n\n\n3.4. Association, Aggregation and Composition\n\n\n13\n\n\n\n\nAssociation\n:\n\n\nWhenever two objects are related with each other the relationshiop is called association between object\n\n\nAggregation\n:\n\n\nAggregation is specialized from of association. In aggregation objects have their own life-cycle but there is ownership and child object can not belongs to another parent object. But this is only an ownership not the life-cycle control of child control through parent object.\n\n\nExample: Student and Teacher, Person and address\n\n\nComposition\n\n\nComposition is again specialize form of aggregation and we can call this as `life and death`` relationship. It is a strong type of aggregation. Child object does not have their life-cycle and if parent object is deleted, all child object will also be deleted.\n\n\nExample: House and room\n\n\n3.5 Polymorphism\n \n13\n\n\nPolymorphism indicates the meaning of \"many forms\"\n\n\nPolynorphism present a method that can have many definitions. Polymorphism is related to \"over loading\" and \"over ridding\".\n\n\nOverloading indicates a method can have different definitions by defining different type of parameters.\n\n\n[code]\ngetPrice(): void\ngetPrice(string name): void\n[/code]\n\n\n3.6 Abstraction\n \n13\n\n\nAbstraction is the process of modelling only relevant features\n\n\n\n\nHide unnecessary details which are irrelevant for current purpose.\n\n\n\n\nReduces complexity and aids understanding.\n\n\nAbstraction provides the freedom to defer implementation decisions by avoiding commitments to details.\n\n\n3.7 Interface\n \n13\n\n\nAn interface is a contract consisting of group of related function prototypes whose usage is defined but whose implementation is not:\n\n\n\n\n\n\nAn interface definition specifies the interface's member functions, called methods, their return types, the number and types of parameters and what they must do.\n\n\n\n\n\n\nThese is no implementation associated with an interface.\n\n\n\n\n\n\n4. Coupling and Cohesion\n\n\n13\n\n\n4.1 Coupling\n\n\nCoupling defines how dependent one object on another object (that is uses).\n\n\nCoupling is a measure of strength of connection between any two system components. The more any one components knows about other components, the tighter (worse) the coupling is between those components.\n\n\n4.2 Cohesion\n\n\nCohesion defines how narrowly defined an object is. Functional cohesion refers measures how strongly objects are related.\n\n\nCohesion is a measure of how logically related the parts of an individual components are to each other, and to the overall components. The more logically related the parts of components are to each other higher (better) the cohesion of that components.\n\n\n4.3 Object Oriented Design\n\n\nLow coupling and tight cohesion is good object oriented design.\n\n\nChallenge\n\n\n\nObject\n\n\n\nTask 1\n: With boiler plate code, make an gif image (32x32) Mario fire ball and jump to get coins\n\n\n5. NEXT\n\n\n\n\nDesign Principles\n\n\nDesign Patterns\n\n\n\n\n\n\n\n\n\n\n\n\nObject Oriented Concept slideshare\n\n\n\n\n\n\nChapter 20. Object-Oriented Programming Principles (OOP)\n\n\n\n\n\n\nObject Oriented Programming\n\n\n\n\n\n\nQuick Tip: The OOP Principle of Encapsulation\n\n\n\n\n\n\nEncapsulation (computer programming)\n\n\n\n\n\n\nInheritance (object-oriented programming)\n\n\n\n\n\n\nQuick Tip: The OOP Principle of Inheritance\n\n\n\n\n\n\nWhat are the practical (real life) examples of polymorphism, inheritance, composition, overriding, encapsulation, abstraction and other important concepts of OOPS?\n\n\n\n\n\n\nPolymorphism (computer science)\n\n\n\n\n\n\nPolymorphism in Java\n\n\n\n\n\n\nWhat Is an Object?\n\n\n\n\n\n\nWhat Is a Class?\n\n\n\n\n\n\nAdvance oops concepts", 
            "title": "Introduction"
        }, 
        {
            "location": "/oop/#oop", 
            "text": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which are data structures that contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. A distinguishing feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated (objects have a notion of \"this\" or \"self\"). In OO programming, computer programs are designed by making them out of objects that interact with one another.[1][2] There is significant diversity in object-oriented programming, but most popular languages are class-based, meaning that objects are instances of classes, which typically also determines their type.", 
            "title": "OOP"
        }, 
        {
            "location": "/oop/#1-a-first-look", 
            "text": "Procedural vs Object Oriented   1   Procedural Approach   Focus is on procedures  All data is shared: no protection  More difficult to modify  Hard to manage complexity   Advantages of Object Orientation   People think in terms of object  OO models map to reality   OO models are: Easy to develop   Easy to understand.", 
            "title": "1. A First Look"
        }, 
        {
            "location": "/oop/#2-principles", 
            "text": "encapsulation ,  inheritance ,  abstraction ,  polymorphism   2  \nFundamental Principles of OOP In order for a programming language to be object-oriented, it has to enable working with classes and objects as well as the implementation and use of the fundamental object-oriented principles and concepts: inheritance, abstraction, encapsulation and polymorphism.  2.1 Encapsulation   3   4   5  Encapsulation is the packing of data and functions into a single component. The features of encapsulation are supported using classes in most object-oriented programming languages, although other alternatives also exist. It allows selective hiding of properties and methods in an object by building an impenetrable wall to protect the code from accidental corruption.   What it do?  We will learn to hide unnecessary details in our classes and provide a clear and simple interface for working with them.    Example : A popular example you\u2019ll hear for encapsulation is driving a car. Do you need to know exactly how every aspect of a car works (engine, carburettor, alternator, and so on)? No - you need to know how to use the steering wheel, brakes, accelerator, and so on.  2.2 Inheritance   6   7  Inheritance is when an object or class is based on another object (prototypal inheritance) or class (class-based inheritance), using the same implementation (inheriting from an object or class) specifying implementation to maintain the same behavior (realizing an interface; inheriting behavior).   inherit everything, add data or functionality, override functions, super    What it do?  We will explain how class hierarchies improve code readability and enable the reuse of functionality.    Example : A real-world example of inheritance is genetic inheritance. We all receive genes from both our parents that then define who we are. We share qualities of both our parents, and yet at the same time are different from them.    Example : we might classify different kinds of vehicles according to the inheritance hierarchy. Moving down the hierarchy, each kind of vehicle is both more specialized than its parent (and all of its ancestors) and more general than its children (and all of its descendants). A wheeled vehicle inherits properties common to all vehicles (it holds one or more people and carries them from place to place) but has an additional property that makes it more specialized (it has wheels). A car inherits properties common to all wheeled vehicles, but has additional, more specialized properties (four wheels, an engine, a body, and so forth). The inheritance relationship can be viewed as an is-a relationship. In this relationship, the objects become more specialized the lower in the hierarchy you go.   \nLook at the image above you will get a point. 8  Yes, the derived class can access base class properties and still the derived class has its own properties.  2.3 Abstraction  In computer science, abstraction is a technique for managing complexity of computer systems. It works by establishing a level of complexity on which a person interacts with the system, suppressing the more complex details below the current level. The programmer works with an idealized interface (usually well defined) and can add additional levels of functionality that would otherwise be too complex to handle.   What it do?  We will learn how to work through abstractions: to deal with objects considering their important characteristics and ignore all other details.    Example : You'll never buy a \"device\", but always buy something more specific : iPhone, Samsung Galaxy, Nokia 3310... Here, iPhone, Samsung Galaxy and Nokia 3310 are concrete things, device is abstract.  2.4 Polymorphism   9  Polymorphism is the provision of a single interface to entities of different types. A polymorphic type is one whose operations can also be applied to values of some other type, or types.   What it do?  We will explain how to work in the same manner with different objects, which define a specific implementation of some abstract behavior.    Example : All animal can speak, but dogs woof, cats meow, and ducks quack  There are two types of polymorphism    Overloading (compile time polymorphism): methods have the same name but different parameters.  Overriding (run time polymorphism): the implementation given in base class is replaced with that in sub class.     Example   10 : Let us Consider Car example for discussing the polymorphism. Take any brand like Ford, Honda, Toyota, BMW, Benz etc., Everything is  of type Car.\nBut each have their own advanced features and more advanced technology involved in their move behavior.", 
            "title": "2. Principles"
        }, 
        {
            "location": "/oop/#3-concepts", 
            "text": "Learn Object Oriented Programming though  Mario Game  [embed]https://www.youtube.com/watch?v=HBbzYKMfx5Y[/embed]  How Mario get  1up   3.1. Object   11  \n  Objects are key to understanding object-oriented technology. Look around right now and you'll find many examples of real-world objects: your dog, your desk, your television set, your bicycle.  In mario world,  Mario is an object.   Goomba is an object.   Koopa is also an object. Even a coin  and a pile   are objects  \n  Software objects are conceptually similar to real-world objects: they too consist of  state  and related  behavior .\n\n  An object stores its  state  in  fields  (variables in some programming languages) and exposes its  behavior  through  methods  (functions in some programming languages). Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication. Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation \u2014 a fundamental principle of object-oriented programming.  In Mario world,  Mario   has some fields like position (which indicate where Mario stands), state (which indicate whether Mario alive), and some methods like walk  , fire or jump.  \nGoomba   has some fields like position (which indicate where Goomba stands), state (which indicate whether Goomba die), and direction (which indicate the direction Goomba moves). Goomba has move method, and jumped_on method (which occurs when it is jumped on by Mario) (Poor Goomba!)  Mario Objects, real scene  3.2 Class   12   In the real world, you'll often find many individual objects all of the same kind. There may be thousands of other bicycles in existence, all of the same make and model. Each bicycle was built from the same set of blueprints and therefore contains the same components. In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles. A class is the blueprint from which individual objects are created.   In Mario world, each coin object come from Coin class, and every Koomba come from Koomba class   3.3. Inheritance   13   Inheritance is a mechanism in OOP to design two or more entities that are different but share many common features.    Feature common to all classes are defined in the  superclass  The classes that inherit common features from the  superclass  are called  subclasses   In Mario World,  Goomba  and  Koopa  is in  AND MANY, MANY MORE   3.4. Association, Aggregation and Composition  13   Association :  Whenever two objects are related with each other the relationshiop is called association between object  Aggregation :  Aggregation is specialized from of association. In aggregation objects have their own life-cycle but there is ownership and child object can not belongs to another parent object. But this is only an ownership not the life-cycle control of child control through parent object.  Example: Student and Teacher, Person and address  Composition  Composition is again specialize form of aggregation and we can call this as `life and death`` relationship. It is a strong type of aggregation. Child object does not have their life-cycle and if parent object is deleted, all child object will also be deleted.  Example: House and room  3.5 Polymorphism   13  Polymorphism indicates the meaning of \"many forms\"  Polynorphism present a method that can have many definitions. Polymorphism is related to \"over loading\" and \"over ridding\".  Overloading indicates a method can have different definitions by defining different type of parameters.  [code]\ngetPrice(): void\ngetPrice(string name): void\n[/code]  3.6 Abstraction   13  Abstraction is the process of modelling only relevant features   Hide unnecessary details which are irrelevant for current purpose.   Reduces complexity and aids understanding.  Abstraction provides the freedom to defer implementation decisions by avoiding commitments to details.  3.7 Interface   13  An interface is a contract consisting of group of related function prototypes whose usage is defined but whose implementation is not:    An interface definition specifies the interface's member functions, called methods, their return types, the number and types of parameters and what they must do.    These is no implementation associated with an interface.", 
            "title": "3. Concepts"
        }, 
        {
            "location": "/oop/#4-coupling-and-cohesion", 
            "text": "13", 
            "title": "4. Coupling and Cohesion"
        }, 
        {
            "location": "/oop/#41-coupling", 
            "text": "Coupling defines how dependent one object on another object (that is uses).  Coupling is a measure of strength of connection between any two system components. The more any one components knows about other components, the tighter (worse) the coupling is between those components.", 
            "title": "4.1 Coupling"
        }, 
        {
            "location": "/oop/#42-cohesion", 
            "text": "Cohesion defines how narrowly defined an object is. Functional cohesion refers measures how strongly objects are related.  Cohesion is a measure of how logically related the parts of an individual components are to each other, and to the overall components. The more logically related the parts of components are to each other higher (better) the cohesion of that components.", 
            "title": "4.2 Cohesion"
        }, 
        {
            "location": "/oop/#43-object-oriented-design", 
            "text": "Low coupling and tight cohesion is good object oriented design.", 
            "title": "4.3 Object Oriented Design"
        }, 
        {
            "location": "/oop/#5-next", 
            "text": "Design Principles  Design Patterns       Object Oriented Concept slideshare    Chapter 20. Object-Oriented Programming Principles (OOP)    Object Oriented Programming    Quick Tip: The OOP Principle of Encapsulation    Encapsulation (computer programming)    Inheritance (object-oriented programming)    Quick Tip: The OOP Principle of Inheritance    What are the practical (real life) examples of polymorphism, inheritance, composition, overriding, encapsulation, abstraction and other important concepts of OOPS?    Polymorphism (computer science)    Polymorphism in Java    What Is an Object?    What Is a Class?    Advance oops concepts", 
            "title": "5. NEXT"
        }, 
        {
            "location": "/oop_uml/", 
            "text": "The Unified Modeling Language (UML) is a general-purpose, developmental, modeling language in the field of software engineering, that is intended to provide a standard way to visualize the design of a system.\n\n\n\n\n\n\nhttp://www.yuml.me/\n\n\nUse UML with IntellIJ: \nUML Designer\n\n\n\n\n\nArchitecture\n\n\n1\n\n\n\n\n\n\nDesign\n of a system consists of classes, interfaces and collaboration. UML provides class diagram, object diagram to support this.\n\n\nImplementation\n defines the components assembled together to make a complete physical system. UML component diagram is used to support implementation perspective.\n\n\nProcess\n defines the flow of the system. So the same elements as used in Design are also used to support this perspective.\n\n\nDeployment\n represents the physical nodes of the system that forms the hardware. UML deployment diagram is used to support this perspective.\n\n\n\n\nModelling Types\n\n\n2\n\n\n\n\nDiagrams\n\n\nUsecase Diagram\n\n\n3\n \n4\n \n5\n\n\n\n\nA \nuse case\n diagram at its simplest is a \nrepresentation of a user's interaction\n with the system that shows the \nrelationship between the user\n and the \ndifferent use cases\n in which the user is involved.\n\n\nA use case diagram can identify the different types of users of a system and the different use cases and will often be accompanied by other types of diagrams as well.\n\n\n\n\n\n\n\n\nUse case diagrams depict:\n\n\n\n\nUse cases.\n A use case describes a sequence of actions that provide something of measurable value to an actor and is drawn as a horizontal ellipse. \n(example)\n\n\nActors.\n An actor is a person, organization, or external system that plays a role in one or more interactions with your system. Actors are drawn as stick figures. \n(example)\n\n\nAssociations.\n Associations between actors and use cases are indicated in use case diagrams by solid lines. An association exists whenever an actor is involved with an interaction described by a use case. Associations are modeled as lines connecting use cases and actors to one another, with an optional arrowhead on one end of the line. The arrowhead is often used to indicating the direction of the initial invocation of the relationship or to indicate the primary actor within the use case. The arrowheads are typically confused with data flow and as a result I avoid their use. \n(example)\n\n\nExtend\n: Extend is a directed relationship that specifies how and when the behavior defined in usually supplementary (optional) extending use case can be inserted into the behavior defined in the extended use case. \n(example)\n\n\nInclude\n is a directed relationship between two use cases which is used to show that behavior of the included use case (the addition) is inserted into the behavior of the including (the base) use case. \n(example)\n\n\nSystem boundary boxes\n (optional). You can draw a rectangle around the use cases, called the system boundary box, to indicates the scope of your system. Anything within the box represents functionality that is in scope and anything outside the box is not. System boundary boxes are rarely used, although on occasion I have used them to identify which use cases will be delivered in each major release of a system. \n(example)\n\n\nPackages\n (optional). Packages are UML constructs that enable you to organize model elements (such as use cases) into groups. Packages are depicted as file folders and can be used on any of the UML diagrams, including both use case diagrams and class diagrams. I use packages only when my diagrams become unwieldy, which generally implies they cannot be printed on a single page, to organize a large diagram into smaller ones. \n(example)\n\n\n\n\nClass Diagram\n\n\n6\n\n\n\n\nIn software engineering, a class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.\n\n\n\n\n\n\n3.3.1 UML Association \n9\n \n10\n\n\n\n\nAssociation\n\n\nAssociation is reference based relationship between two classes. Here a class A holds a class level reference to class B. Association can be represented by a line between these classes with an arrow indicating the navigation direction. In case arrow is on the both sides, association has bidirectional navigation.\n\n\n\n\nAggregation\n\n\nAggregation (shared aggregation)\n is a \"weak\" form of aggregation when part instance is independent of the composite:\n\n\n\n\nthe same (shared) part could be included in several composites, and\n\n\nif composite is deleted, shared parts may still exist.\n\n\n\n\nShared aggregation is shown as binary association decorated with a hollow diamond as a terminal adornment at the aggregate end of the association line. The diamond should be noticeably smaller than the diamond notation for N-ary associations. Shared aggregation is shown as binary association decorated with a hollow diamond.\n\n\n\n\nComposition\n\n\nComposition (composite aggregation) is a \"strong\" form of aggregation. Composition requirements/features listed in UML specification are:\n\n\n\n\nit is a whole/part relationship,\n\n\nit is binary association\n\n\npart could be included in at most one composite (whole) at a time, and\n\n\nif a composite (whole) is deleted, all of its composite parts are \"normally\" deleted with it.\n\n\n\n\nNote, that UML does not define how, when and specific order in which parts of the composite are created. Also, in some cases a part can be removed from a composite before the composite is deleted, and so is not necessarily deleted as part of the composite.\n\n\n\n\nAggregation vs Composition\n\n\n11\n\n\n\n\nSequence Diagram\n\n\n7\n\n\n\n\nA Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order. It is a construct of a Message Sequence Chart.\n\n\nA sequence diagram shows object interactions arranged in time sequence.\n\n\nIt depicts the objects and classes involved in the scenario and the sequence of messages exchanged between the objects needed to carry out the functionality of the scenario. Sequence diagrams are typically associated with use case realizations in the Logical View of the system under development. Sequence diagrams are sometimes called event diagrams or event scenarios.\n\n\n\n\n\n\nActivity Diagram\n\n\n8\n\n\nActivity diagrams are graphical representations of workflows of stepwise activities and actions with support for choice, iteration and concurrency. In the Unified Modeling Language, activity diagrams are intended to model both computational and organizational processes (i.e. workflows). Activity diagrams show the overall flow of control.\n\n\n\n\n\n\n\n\n\n\n\n\nUML - Architecture\n\n\n\n\n\n\nUML - Modeling Types\n\n\n\n\n\n\nUML - Use Case Diagrams\n\n\n\n\n\n\nUse Case Diagram\n\n\n\n\n\n\nUML Association Between Actor and Use Case\n\n\n\n\n\n\nClass diagram\n\n\n\n\n\n\nSequence diagram\n\n\n\n\n\n\nActivity diagram\n\n\n\n\n\n\nAggregation\n\n\n\n\n\n\nUML Class Diagram: Association, Aggregation and Composition\n\n\n\n\n\n\nLecture Notes on Object-Oriented Programming: Object Oriented Aggregation", 
            "title": "UML"
        }, 
        {
            "location": "/oop_uml/#architecture", 
            "text": "1    Design  of a system consists of classes, interfaces and collaboration. UML provides class diagram, object diagram to support this.  Implementation  defines the components assembled together to make a complete physical system. UML component diagram is used to support implementation perspective.  Process  defines the flow of the system. So the same elements as used in Design are also used to support this perspective.  Deployment  represents the physical nodes of the system that forms the hardware. UML deployment diagram is used to support this perspective.", 
            "title": "Architecture"
        }, 
        {
            "location": "/oop_uml/#modelling-types", 
            "text": "2", 
            "title": "Modelling Types"
        }, 
        {
            "location": "/oop_uml/#diagrams", 
            "text": "", 
            "title": "Diagrams"
        }, 
        {
            "location": "/oop_uml/#usecase-diagram", 
            "text": "3   4   5   A  use case  diagram at its simplest is a  representation of a user's interaction  with the system that shows the  relationship between the user  and the  different use cases  in which the user is involved.  A use case diagram can identify the different types of users of a system and the different use cases and will often be accompanied by other types of diagrams as well.     Use case diagrams depict:   Use cases.  A use case describes a sequence of actions that provide something of measurable value to an actor and is drawn as a horizontal ellipse.  (example)  Actors.  An actor is a person, organization, or external system that plays a role in one or more interactions with your system. Actors are drawn as stick figures.  (example)  Associations.  Associations between actors and use cases are indicated in use case diagrams by solid lines. An association exists whenever an actor is involved with an interaction described by a use case. Associations are modeled as lines connecting use cases and actors to one another, with an optional arrowhead on one end of the line. The arrowhead is often used to indicating the direction of the initial invocation of the relationship or to indicate the primary actor within the use case. The arrowheads are typically confused with data flow and as a result I avoid their use.  (example)  Extend : Extend is a directed relationship that specifies how and when the behavior defined in usually supplementary (optional) extending use case can be inserted into the behavior defined in the extended use case.  (example)  Include  is a directed relationship between two use cases which is used to show that behavior of the included use case (the addition) is inserted into the behavior of the including (the base) use case.  (example)  System boundary boxes  (optional). You can draw a rectangle around the use cases, called the system boundary box, to indicates the scope of your system. Anything within the box represents functionality that is in scope and anything outside the box is not. System boundary boxes are rarely used, although on occasion I have used them to identify which use cases will be delivered in each major release of a system.  (example)  Packages  (optional). Packages are UML constructs that enable you to organize model elements (such as use cases) into groups. Packages are depicted as file folders and can be used on any of the UML diagrams, including both use case diagrams and class diagrams. I use packages only when my diagrams become unwieldy, which generally implies they cannot be printed on a single page, to organize a large diagram into smaller ones.  (example)", 
            "title": "Usecase Diagram"
        }, 
        {
            "location": "/oop_uml/#class-diagram", 
            "text": "6   In software engineering, a class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.", 
            "title": "Class Diagram"
        }, 
        {
            "location": "/oop_uml/#331-uml-association-9-10", 
            "text": "Association  Association is reference based relationship between two classes. Here a class A holds a class level reference to class B. Association can be represented by a line between these classes with an arrow indicating the navigation direction. In case arrow is on the both sides, association has bidirectional navigation.   Aggregation  Aggregation (shared aggregation)  is a \"weak\" form of aggregation when part instance is independent of the composite:   the same (shared) part could be included in several composites, and  if composite is deleted, shared parts may still exist.   Shared aggregation is shown as binary association decorated with a hollow diamond as a terminal adornment at the aggregate end of the association line. The diamond should be noticeably smaller than the diamond notation for N-ary associations. Shared aggregation is shown as binary association decorated with a hollow diamond.   Composition  Composition (composite aggregation) is a \"strong\" form of aggregation. Composition requirements/features listed in UML specification are:   it is a whole/part relationship,  it is binary association  part could be included in at most one composite (whole) at a time, and  if a composite (whole) is deleted, all of its composite parts are \"normally\" deleted with it.   Note, that UML does not define how, when and specific order in which parts of the composite are created. Also, in some cases a part can be removed from a composite before the composite is deleted, and so is not necessarily deleted as part of the composite.   Aggregation vs Composition  11", 
            "title": "3.3.1 UML Association 9 10"
        }, 
        {
            "location": "/oop_uml/#sequence-diagram", 
            "text": "7   A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order. It is a construct of a Message Sequence Chart.  A sequence diagram shows object interactions arranged in time sequence.  It depicts the objects and classes involved in the scenario and the sequence of messages exchanged between the objects needed to carry out the functionality of the scenario. Sequence diagrams are typically associated with use case realizations in the Logical View of the system under development. Sequence diagrams are sometimes called event diagrams or event scenarios.", 
            "title": "Sequence Diagram"
        }, 
        {
            "location": "/oop_uml/#activity-diagram", 
            "text": "8  Activity diagrams are graphical representations of workflows of stepwise activities and actions with support for choice, iteration and concurrency. In the Unified Modeling Language, activity diagrams are intended to model both computational and organizational processes (i.e. workflows). Activity diagrams show the overall flow of control.       UML - Architecture    UML - Modeling Types    UML - Use Case Diagrams    Use Case Diagram    UML Association Between Actor and Use Case    Class diagram    Sequence diagram    Activity diagram    Aggregation    UML Class Diagram: Association, Aggregation and Composition    Lecture Notes on Object-Oriented Programming: Object Oriented Aggregation", 
            "title": "Activity Diagram"
        }, 
        {
            "location": "/oop_designpattern/", 
            "text": "Design Patterns\n\n\n\n\nCreational design patterns\n\n\n\nThese design patterns are all about class instantiation. This pattern can be further divided into class-creation patterns and object-creational patterns. While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation effectively to get the job done.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStructural design patterns\n\n\n\nThese design patterns are all about Class and Object composition. Structural class-creation patterns use inheritance to compose interfaces. Structural object-patterns define ways to compose objects to obtain new functionality.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBehavioral design patterns\n\n\n\nThese design patterns are all about Class's objects communication. Behavioral patterns are those patterns that are most specifically concerned with communication between objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesign Pattern Q\nA\n\n\n\n\n\nExamples of GoF Design Patterns in Java's core libraries\n\n\nDependency Injection vs Factory Pattern\n\n\nWhat is Inversion of Control?\n\n\nWhat is so bad about singletons?\n\n\nWhat is the basic difference between Factory and Abstract Factory Patterns?\n\n\nWhen would you use the Builder Pattern?\n\n\nWhat is the difference between Builder Design pattern and Factory Design pattern?\n\n\nHow do the Proxy, Decorator, Adapter, and Bridge Patterns differ?\n\n\n\n\n\nAbstract Factory Pattern\n\n\n\n  \nCreates an instance of several families of classes\n\n\n\n\n\nIntuitive \n1\n\n\n\n\n\nVolkswagen Transparent Factory in Dresden\n\n\n\nWhat is it? \n2\n\n\n\nThe abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes.\n\n\nIn normal usage, the client software creates a concrete implementation of the abstract factory and then uses the generic interface of the factory to create the concrete objects that are part of the theme. The client doesn't know (or care) which concrete objects it gets from each of these internal factories, since it uses only the generic interfaces of their products.\n\n\nThis pattern separates the details of implementation of a set of objects from their general usage and relies on object composition, as object creation is implemented in methods exposed in the factory interface.\n\n\nDesign\n\n\n\n\n\nExample Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe most interesting factories in the world\n\n\n\n\n\n\n\nAbstract factory pattern\n\n\n\n\n\n\n\n\n\n\nObserver Pattern\n\n\nIntuitive\n\n\n\n\n\n\n\n\nDefinition \n1\n\n\n\n  The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event handling systems. The Observer pattern is also a key part in the familiar model\u2013view\u2013controller (MVC) architectural pattern. The observer pattern is implemented in numerous programming libraries and systems, including almost all GUI toolkits.\n\n\n\n\nStructure \n2\n\n\n\n\nSubject\n\n\n\n\nknows its observers. Any number of Observer objects may observe a subject.\n\n\nprovides an interface for attaching and detaching Observer objects\n\n\n\n\n\nObserver\n\n\n\n\ndefines an updating interface for objects that should be notified of changes in a subject.\n\n\n\n\n\nConcreteSubject\n\n\n\n\nstores state of interest to ConcreteObserver objects.\n\n\nsends a notification to its observers when its state changes.\n\n\n\n\n\nConcreteObserver\n\n\n\n\nmaintains a reference to a ConcreteSubject object.\n\n\nstores state that should stay consistent with the subject's.\n\n\nimplements the Observer updating interface to keep its state consistent with the subject's.\n\n\n\n\n\nExamples\n\n\n\nExample 1: Blog Manager Application\n\n\nIn this application, each user is an \nObserver\n, each blog is a \nSubject\n. When a blog post a new article (state change), user get an update. When users get update, they update their articles.\n\n\n[code lang=\"java\"]\nBlog sportBlog = new Blog(\"SPORT\");\nUser user1 = new User(\"Fan1\");\nUser user2 = new User(\"Fan2\");\n\n\nsportBlog.attach(user1);\nsportBlog.attach(user2);\n\n\nsportBlog.post(new Article(\"football\"));\nsportBlog.post(new Article(\"swimming\"));\nuser1.getArticles();\nuser2.getArticles();\n\n\nsportBlog.detach(user1);`\n[/code]\n\n\nReal Implementations\n\n\n\nBroadcast Receiver\n \n3\n \n4\n on Android\n\n\nMore Articles\n\n\n\n\nhttp://javapapers.com/design-patterns/observer-design-pattern/\n\n\n\n\nComparison\n\n\nObserver/Observable pattern vs Publisher/Subscriber pattern \n5\n\n\n\n\nObserver/Observable\n pattern is mostly implemented in a \nsynchronous\n way, i.e. the observable calls the appropriate method of all its observers when some event occurs. The \nPublisher/Subscriber\n pattern is mostly implemented in an \nasynchronous\n way (using message queue).\n\n\nIn the \nObserver/Observable\n pattern, \nthe observers are aware of the observable\n. Whereas, in \nPublisher/Subscriber\n, publishers and subscribers \ndon't need to know each other\n. They simply communicate with the help of message queues.\n\n\n\n\n\n\n\n\n\n\n\n\nObserver pattern\n\n\n\n\n\n\nBroadcast Receiver\n\n\n\n\n\n\nDesign Patterns: Elements of Reusable Object-Oriented Software\n\n\n\n\n\n\nWhich design patterns are used on Android?\n\n\n\n\n\n\nstackoverflow, Difference between Observer, Pub/Sub, and Data Binding", 
            "title": "Design Patterns"
        }, 
        {
            "location": "/oop_designpattern/#design-patterns", 
            "text": "", 
            "title": "Design Patterns"
        }, 
        {
            "location": "/oop_designpattern/#abstract-factory-pattern", 
            "text": "Creates an instance of several families of classes", 
            "title": "Abstract Factory Pattern"
        }, 
        {
            "location": "/oop_designpattern/#observer-pattern", 
            "text": "", 
            "title": "Observer Pattern"
        }, 
        {
            "location": "/oop_designpattern/#definition-1", 
            "text": "The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event handling systems. The Observer pattern is also a key part in the familiar model\u2013view\u2013controller (MVC) architectural pattern. The observer pattern is implemented in numerous programming libraries and systems, including almost all GUI toolkits.", 
            "title": "Definition 1"
        }, 
        {
            "location": "/oop_designpattern/#structure-2", 
            "text": "Subject   knows its observers. Any number of Observer objects may observe a subject.  provides an interface for attaching and detaching Observer objects   Observer   defines an updating interface for objects that should be notified of changes in a subject.   ConcreteSubject   stores state of interest to ConcreteObserver objects.  sends a notification to its observers when its state changes.   ConcreteObserver   maintains a reference to a ConcreteSubject object.  stores state that should stay consistent with the subject's.  implements the Observer updating interface to keep its state consistent with the subject's.", 
            "title": "Structure 2"
        }, 
        {
            "location": "/oop_designpattern/#more-articles", 
            "text": "http://javapapers.com/design-patterns/observer-design-pattern/", 
            "title": "More Articles"
        }, 
        {
            "location": "/oop_designpattern/#comparison", 
            "text": "", 
            "title": "Comparison"
        }, 
        {
            "location": "/oop_designpattern/#observerobservable-pattern-vs-publishersubscriber-pattern-5", 
            "text": "Observer/Observable  pattern is mostly implemented in a  synchronous  way, i.e. the observable calls the appropriate method of all its observers when some event occurs. The  Publisher/Subscriber  pattern is mostly implemented in an  asynchronous  way (using message queue).  In the  Observer/Observable  pattern,  the observers are aware of the observable . Whereas, in  Publisher/Subscriber , publishers and subscribers  don't need to know each other . They simply communicate with the help of message queues.       Observer pattern    Broadcast Receiver    Design Patterns: Elements of Reusable Object-Oriented Software    Which design patterns are used on Android?    stackoverflow, Difference between Observer, Pub/Sub, and Data Binding", 
            "title": "Observer/Observable pattern vs Publisher/Subscriber pattern 5"
        }, 
        {
            "location": "/os/", 
            "text": "Operating System\n\n\n\n\nAn operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs. The operating system is a component of the system software in a computer system. Application programs usually require an operating system to function.\n\n\n\n\nCommon Features\n\n\n\n\nIO: File Operations\n\n\nSecurity: User Environments\n\n\nNetwork Operations\n\n\nProcess Manager\n\n\nSystem Information\n\n\nText Processing \n Pipeline\n\n\nDevice Manager", 
            "title": "Introduction"
        }, 
        {
            "location": "/os/#operating-system", 
            "text": "An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs. The operating system is a component of the system software in a computer system. Application programs usually require an operating system to function.   Common Features   IO: File Operations  Security: User Environments  Network Operations  Process Manager  System Information  Text Processing   Pipeline  Device Manager", 
            "title": "Operating System"
        }, 
        {
            "location": "/os_linux/", 
            "text": "Please visit \nlinux tutorial page", 
            "title": "Linux"
        }, 
        {
            "location": "/os_centos/", 
            "text": "CentOS 6.5\n\n\nVMWare\n\n\nNetworking\n\n\nRemote Desktop\n\n\nInstall XRDP Remote Desktop to CentOS 6.5\n\n\nRHEL/CentOS 6 32-Bit\n\n\nwget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nrpm -ivh epel-release-6-8.noarch.rpm\n\n\n\n\nRHEL/CentOS 6 64-Bit\n\n\nwget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nrpm -ivh epel-release-6-8.noarch.rpm\n\n\n\n\nInstall tigervnc\n\n\nyum install xrdp tigervnc-server\nservice vncserver start\nservice xrdp start\nservice iptables stop\nchkconfig iptables off\nchkconfig xrdp on\nchkconfig vncserver on\n\n\n\n\nConfig control to other users\n\n\nSystem\n \n \nPreferences\n \n \nRemote Desktop\n\n\n\n\nFirewall\n\n\n# start firewall\nsystemctl start firewalld\n# stop firewall\nsystemctl stop firewalld\n# disable firewall\nsystemctl disable firewalld\n# check status\nsystemctl status firewalld\n\n\n\n\nDevelopment Tools\n\n\n\nInstall\n\n\nyum clean all\nyum groupinstall \nquot;Development tools\nquot;\n\n\n\n\n\n  Warning: CentOS 6 is not support for docker\n\n\n\n\nStatic IP\n\n\n## Configure eth0\n#\n# vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\nDEVICE=\neth0\n\nNM_CONTROLLED=\nyes\n\nONBOOT=yes\nHWADDR=A4:BA:DB:37:F1:04\nTYPE=Ethernet\nBOOTPROTO=static\nNAME=\nSystem eth0\n\nUUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03\nIPADDR=192.168.1.44\nNETMASK=255.255.255.0\n\n\n## Configure Default Gateway\n#\n# vi /etc/sysconfig/network\n\nNETWORKING=yes\nHOSTNAME=centos6\nGATEWAY=192.168.1.1\n\n\n## Restart Network Interface\n#\n\n/etc/init.d/network restart\n\n## Configure DNS Server\n#\n# vi /etc/resolv.conf\n\nnameserver 8.8.8.8      # Replace with your nameserver ip\nnameserver 192.168.1.1  # Replace with your nameserver ip\n\n\n\n\nCentOS 7\n\n\nRemote Desktop \n1\n\n\n\n# add repository rpms\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\n\n# install xrdp\nyum -y install xrdp tigervnc-server\n\n# start and enable xrdp service\nsystemctl start xrdp.service\nsystemctl enable xrdp.service\n\n# add firewall rules\nfirewall-cmd --permanent --zone=public --add-port=3389/tcp\nfirewall-cmd --reload\n\n# Configure SELinux\nchcon --type=bin_t /usr/sbin/xrdp\nchcon --type=bin_t /usr/sbin/xrdp-sesman\n\n\n\n\nDevelopment Tools\n\n\n\nInstall\n\n\nyum clean all\nyum groupinstall \nquot;Development tools\nquot;\n\n\n\n\nInstall Docker \n2\n\n\n\n# install docker\nyum -y update\nyum -y install docker docker-registry\n\n# start docker\nsystemctl enable docker.service\nsystemctl start docker.service\nsystemctl status docker.service\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall xrdp on CentOS 7 / RHEL 7\n\n\n\n\n\n\n\nHow To Install Docker on CentOS 7\n\n\n\n\n\n\n\n\n\n\nTeamviewer\n\n\n# get teamviewer id\nteamviewer --info\n\n\n\n\n\n\nYou can open teamviewer with normal user in host computer\n\n\nYou can connect with root user\n\n\n\n\n\n\nPlease Patient when connect to CentOS. HE IS JUST SLOW.\n\n\n\n\nInstallation\n\n\nStep 1: Open Terminal (Applications \u2014\u2014\n Utilities \u2014\u2014\n Terminal).\n\n\nStep 2: Switch to root user.\n\n\nStep 3: Install the prerequisites.\n\n\n# yum install glibc alsa-lib freetype libICE libSM libX11 libXau libXdamage libXext libXfixes libXi libXrandr libXrender libXtst libgcc libuuid libxcb zlib\n\n\n\n\nStep 4: Install TeamViewer.\n\n\n# wget http://download.teamviewer.com/download/teamviewer.i686.rpm\n# yum install teamviewer.i686.rpm\n\n\n\n\nStep 5: Start TeamViewer (Application \u2013\n Internet \u2013\n TeamViewer)\n\n\nInstall Pycharm\n\n\nStep 1. Open Terminal Window\n\n\nStep 2. Download PyCharm for Linux in : \nJetBrain\n\n\nStep 3. From Command Line:\n\n\ntar xvzf pycharm*.tar.gz -C /tmp/\n\n\n\n\nStep 4. Relocating PyCharm\n\n\nsudo su -c \nchown -R root:root /tmp/pycharm*\n\nsudo mv /tmp/pycharm-* /opt/pycharm-*\n\n\n\n\nStep 5. Making PyCharm Symlinks\n\n\nsudo su -c \nln -s /opt/pycharm-community/bin/pycharm.sh /usr/local/bin/pycharm\n\nsudo su -c \nln -s /opt/pycharm-community/bin/inspect.sh /usr/local/bin/inspect\n\n\n\n\n\nStep 6. Launching PyCharm Python IDE\n\n\npycharm", 
            "title": "CentOS"
        }, 
        {
            "location": "/os_centos/#centos-65", 
            "text": "", 
            "title": "CentOS 6.5"
        }, 
        {
            "location": "/os_centos/#vmware", 
            "text": "", 
            "title": "VMWare"
        }, 
        {
            "location": "/os_centos/#networking", 
            "text": "", 
            "title": "Networking"
        }, 
        {
            "location": "/os_centos/#remote-desktop", 
            "text": "Install XRDP Remote Desktop to CentOS 6.5  RHEL/CentOS 6 32-Bit  wget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nrpm -ivh epel-release-6-8.noarch.rpm  RHEL/CentOS 6 64-Bit  wget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nrpm -ivh epel-release-6-8.noarch.rpm  Install tigervnc  yum install xrdp tigervnc-server\nservice vncserver start\nservice xrdp start\nservice iptables stop\nchkconfig iptables off\nchkconfig xrdp on\nchkconfig vncserver on  Config control to other users  System     Preferences     Remote Desktop", 
            "title": "Remote Desktop"
        }, 
        {
            "location": "/os_centos/#firewall", 
            "text": "# start firewall\nsystemctl start firewalld\n# stop firewall\nsystemctl stop firewalld\n# disable firewall\nsystemctl disable firewalld\n# check status\nsystemctl status firewalld", 
            "title": "Firewall"
        }, 
        {
            "location": "/os_centos/#static-ip", 
            "text": "## Configure eth0\n#\n# vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\nDEVICE= eth0 \nNM_CONTROLLED= yes \nONBOOT=yes\nHWADDR=A4:BA:DB:37:F1:04\nTYPE=Ethernet\nBOOTPROTO=static\nNAME= System eth0 \nUUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03\nIPADDR=192.168.1.44\nNETMASK=255.255.255.0\n\n\n## Configure Default Gateway\n#\n# vi /etc/sysconfig/network\n\nNETWORKING=yes\nHOSTNAME=centos6\nGATEWAY=192.168.1.1\n\n\n## Restart Network Interface\n#\n\n/etc/init.d/network restart\n\n## Configure DNS Server\n#\n# vi /etc/resolv.conf\n\nnameserver 8.8.8.8      # Replace with your nameserver ip\nnameserver 192.168.1.1  # Replace with your nameserver ip", 
            "title": "Static IP"
        }, 
        {
            "location": "/os_centos/#centos-7", 
            "text": "", 
            "title": "CentOS 7"
        }, 
        {
            "location": "/os_centos/#teamviewer", 
            "text": "# get teamviewer id\nteamviewer --info   You can open teamviewer with normal user in host computer  You can connect with root user    Please Patient when connect to CentOS. HE IS JUST SLOW.   Installation  Step 1: Open Terminal (Applications \u2014\u2014  Utilities \u2014\u2014  Terminal).  Step 2: Switch to root user.  Step 3: Install the prerequisites.  # yum install glibc alsa-lib freetype libICE libSM libX11 libXau libXdamage libXext libXfixes libXi libXrandr libXrender libXtst libgcc libuuid libxcb zlib  Step 4: Install TeamViewer.  # wget http://download.teamviewer.com/download/teamviewer.i686.rpm\n# yum install teamviewer.i686.rpm  Step 5: Start TeamViewer (Application \u2013  Internet \u2013  TeamViewer)", 
            "title": "Teamviewer"
        }, 
        {
            "location": "/os_centos/#install-pycharm", 
            "text": "", 
            "title": "Install Pycharm"
        }, 
        {
            "location": "/os_centos/#step-1-open-terminal-window", 
            "text": "", 
            "title": "Step 1. Open Terminal Window"
        }, 
        {
            "location": "/os_centos/#step-2-download-pycharm-for-linux-in-jetbrain", 
            "text": "", 
            "title": "Step 2. Download PyCharm for Linux in : JetBrain"
        }, 
        {
            "location": "/os_centos/#step-3-from-command-line", 
            "text": "tar xvzf pycharm*.tar.gz -C /tmp/", 
            "title": "Step 3. From Command Line:"
        }, 
        {
            "location": "/os_centos/#step-4-relocating-pycharm", 
            "text": "sudo su -c  chown -R root:root /tmp/pycharm* \nsudo mv /tmp/pycharm-* /opt/pycharm-*", 
            "title": "Step 4. Relocating PyCharm"
        }, 
        {
            "location": "/os_centos/#step-5-making-pycharm-symlinks", 
            "text": "sudo su -c  ln -s /opt/pycharm-community/bin/pycharm.sh /usr/local/bin/pycharm \nsudo su -c  ln -s /opt/pycharm-community/bin/inspect.sh /usr/local/bin/inspect", 
            "title": "Step 5. Making PyCharm Symlinks"
        }, 
        {
            "location": "/os_centos/#step-6-launching-pycharm-python-ide", 
            "text": "pycharm", 
            "title": "Step 6. Launching PyCharm Python IDE"
        }, 
        {
            "location": "/os_ubuntu/", 
            "text": "Apps\n\n\nIntellIJ\n\n\n\n\n\n\n\nInstall git\n\n\napt-get install -y git\n\n\n\n\nGUI `ubuntu-desktop\n\n\napt-get install ubuntu-desktop\n\n\n\n\nThen restart computer, ubuntu-desktop will run in the next login.\n\n\nInstall IntellIJ in ubuntu\n\n\nDownloads intellij\n\n\nhttps://www.jetbrains.com/idea/download/\n\n\n\n\nCreate Ubuntu desktop launcher\n\n\nrun intellij : cd to folder intellij\n\n\ncd file://path intellij/idea.sh\n\n\n\n\nCreate Ubuntu desktop\n\n\nTools \n Create Desktop Entry\n\n\n\n\nInstall Pycharm on Ubuntu\n\n\nStep 1. To add the PPA, open terminal from the Dash, Launcher, or via Ctrl+Alt+T shortcut keys. When it opens, run command:\n\n\nsudo add-apt-repository ppa:mystic-mirage/pycharm\n\n\n\n\nStep 2. After adding the PPA, update system package cache and install the IDE via Synaptic Package Manager. Or just run below commands one by one in terminal:\n\n\nsudo apt-get update\n\nsudo apt-get install pycharm\n\n\n\n\nStep 3. After finishing the installation, start Pycharm. It will prompt you to activate with license, choose the \nLicense Server\n checkbox and copy below row to it:\n\n\nhttp://idea.qinxi1992.cn", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/os_ubuntu/#apps", 
            "text": "IntellIJ", 
            "title": "Apps"
        }, 
        {
            "location": "/os_ubuntu/#install-git", 
            "text": "apt-get install -y git", 
            "title": "Install git"
        }, 
        {
            "location": "/os_ubuntu/#gui-ubuntu-desktop", 
            "text": "apt-get install ubuntu-desktop  Then restart computer, ubuntu-desktop will run in the next login.", 
            "title": "GUI `ubuntu-desktop"
        }, 
        {
            "location": "/os_ubuntu/#install-intellij-in-ubuntu", 
            "text": "", 
            "title": "Install IntellIJ in ubuntu"
        }, 
        {
            "location": "/os_ubuntu/#downloads-intellij", 
            "text": "https://www.jetbrains.com/idea/download/", 
            "title": "Downloads intellij"
        }, 
        {
            "location": "/os_ubuntu/#create-ubuntu-desktop-launcher", 
            "text": "run intellij : cd to folder intellij  cd file://path intellij/idea.sh  Create Ubuntu desktop  Tools   Create Desktop Entry", 
            "title": "Create Ubuntu desktop launcher"
        }, 
        {
            "location": "/os_ubuntu/#install-pycharm-on-ubuntu", 
            "text": "Step 1. To add the PPA, open terminal from the Dash, Launcher, or via Ctrl+Alt+T shortcut keys. When it opens, run command:  sudo add-apt-repository ppa:mystic-mirage/pycharm  Step 2. After adding the PPA, update system package cache and install the IDE via Synaptic Package Manager. Or just run below commands one by one in terminal:  sudo apt-get update\n\nsudo apt-get install pycharm  Step 3. After finishing the installation, start Pycharm. It will prompt you to activate with license, choose the  License Server  checkbox and copy below row to it:  http://idea.qinxi1992.cn", 
            "title": "Install Pycharm on Ubuntu"
        }, 
        {
            "location": "/os_windows/", 
            "text": "1. File Operations\n\n\n2. User Environments\n\n\n3. Network Operations\n\n\n3.1 SSH\n\n\nSSH Secure Shell Client (homepage, \ndownload\n)\n\n\n3.2 RTMP\n\n\nrtmpdump (\ndownload\n)\n\n\n3.3 Synchonize\n\n\nFullSync (\nhomepage\n)\n\n\n\n\n4. Process\n\n\n# list process\ntasklist\n\n# kill prcess\ntaskkill /im chrome.exe /F\n\n\n\n\n5. System Information\n\n\n# get architecture\nwmic os get osarchitecture\n#: OSArchitecture\n#: 64-bit\n\n\n\n\n\nDownload Windows 7 Professional 64 bit: https://drive.google.com/folderview?id=0B3PWckYm7eLkZS1pVHloNzdrTFk\n=sharing#list\n\n\n\n\nWindows Shell\n\n\nBatsh - A language that compiles to Bash and Windows Batch\n\n\nPrint\n\n\n# print HELLO WORLD\necho HELLO WORLD\n\n# print blank line\necho.\n\n\n\n\nArguments \n3\n\n\necho %1\n\n\n\n\n\n\n$ test.bat helloworld\nhelloworld\n\n\n\n\nSleep\n\n\nSleep for 5 seconds \n1\n\n\ntimeout 5 \n NUL\n\n# deprecated\nping 127.0.0.1 -n 6 \n nul\n\n\n\n\nConditional \n4\n\n\nif exist input.dat goto handle_input_file\n    echo The file input.dat does not exist\n    pause\n    exit /b\n:handle_input_file\n\n\n\n\nLoop \n2\n\n\n:while1\necho forever loop\ngoto :while1\n\n\n\n\n\n\n$ test.bat\nforever loop\nforever loop\nforever loop\n...\n\n\n\n\nWindows: How to fix MBR\n\n\nFix MBR with command prompt and installation DVD. Fix MBR with command prompt requires the original Windows 8 or 8.1 installation DVD. The instructions are \n1\n\n\n1.Boot from the original installation DVD.\n2.At the Welcome screen, click \"Repair your computer\".\n3.Choose\" Troubleshoot \n Advanced options \n Command Prompt\".\n4.When the Command Prompt loads, type the following commands in order:\n\n\nbootrec /FixMbr\nbootrec /FixBoot\nbootrec /ScanOs\nbootrec /RebuildBcd\n\n\n\n\nRemember to press \"Enter\" after each command and wait for each operation to finish.\n\n\n5.Remove the DVD from the disk tray.\n6.Type exit and Hit \"Enter\".\n7.Restart your computer and check if Windows 8/8.1 can boot now.\n\n\nInstalling Theano on Windows 8.1\n\n\nGetting\u00a0theano works in Windows 8.1 is not easy but possible. The important is use the right receipts. I found the right receipts and nice tutorial \nhere\n\n\nReceipts\n\n\n\n\nWindows 8.1 64-bit\n\n\nCUDA 64-bit 7\n\n\nVisual Studio 2013 (compiler 12.0) Ultimate\n\n\nAnaconda 64-bit 2.1.0\n\n\nGit-scm\n\n\n\n\n\nI'm very happy getting things done.\n\n\nPS C:Usersrain\n python\nPython 2.7.8 |Anaconda 2.1.0 (64-bit)| (default, Jul 2 2014, 15:12:11) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nAnaconda is brought to you by Continuum Analytics.\nPlease check out: http://continuum.io/thanks and https://binstar.org\n\n import theano\nDEBUG: nvcc STDOUT mod.cu\nCreating library C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_\n3_GenuineIntel-2.7.8-64/cuda_ndarray/cuda_ndarray.lib and object C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8\n-6.2.9200-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-2.7.8-64/cuda_ndarray/cuda_ndarray.exp\n\nUsing gpu device 0: GeForce GTX 980\nDEBUG: nvcc STDOUT mod.cu\nCreating library C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_\n3_GenuineIntel-2.7.8-64/tmpgt3iqm/c8d7bd33dfef61705c2854dd1f0cb7ce.lib and object C:/Users/rain/AppData/Local/Theano/com\npiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-2.7.8-64/tmpgt3iqm/c8d7bd33dfef61705c2854dd\n1f0cb7ce.exp\n\nDEBUG: nvcc STDOUT mod.cu\nCreating library C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_\n3_GenuineIntel-2.7.8-64/tmpfab1so/0fc80e98cce631ecaa526b69dd28dae1.lib and object C:/Users/rain/AppData/Local/Theano/com\npiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-2.7.8-64/tmpfab1so/0fc80e98cce631ecaa526b69\ndd28dae1.exp\n\n\n\n\n\n\n\n\n\n\n\nWindows MBR fix\n\n\n\n\n\n\nWhile loop in batch\n\n\n\n\n\n\nCommand line parameters\n\n\n\n\n\n\nWindows Batch Files for Fun and Profit", 
            "title": "Windows"
        }, 
        {
            "location": "/os_windows/#1-file-operations", 
            "text": "", 
            "title": "1. File Operations"
        }, 
        {
            "location": "/os_windows/#2-user-environments", 
            "text": "", 
            "title": "2. User Environments"
        }, 
        {
            "location": "/os_windows/#3-network-operations", 
            "text": "", 
            "title": "3. Network Operations"
        }, 
        {
            "location": "/os_windows/#31-ssh", 
            "text": "SSH Secure Shell Client (homepage,  download )", 
            "title": "3.1 SSH"
        }, 
        {
            "location": "/os_windows/#32-rtmp", 
            "text": "rtmpdump ( download )", 
            "title": "3.2 RTMP"
        }, 
        {
            "location": "/os_windows/#33-synchonize", 
            "text": "FullSync ( homepage )", 
            "title": "3.3 Synchonize"
        }, 
        {
            "location": "/os_windows/#4-process", 
            "text": "# list process\ntasklist\n\n# kill prcess\ntaskkill /im chrome.exe /F", 
            "title": "4. Process"
        }, 
        {
            "location": "/os_windows/#5-system-information", 
            "text": "# get architecture\nwmic os get osarchitecture\n#: OSArchitecture\n#: 64-bit  \nDownload Windows 7 Professional 64 bit: https://drive.google.com/folderview?id=0B3PWckYm7eLkZS1pVHloNzdrTFk =sharing#list", 
            "title": "5. System Information"
        }, 
        {
            "location": "/os_windows/#windows-shell", 
            "text": "Batsh - A language that compiles to Bash and Windows Batch", 
            "title": "Windows Shell"
        }, 
        {
            "location": "/os_windows/#print", 
            "text": "# print HELLO WORLD\necho HELLO WORLD\n\n# print blank line\necho.", 
            "title": "Print"
        }, 
        {
            "location": "/os_windows/#arguments-3", 
            "text": "echo %1   $ test.bat helloworld\nhelloworld", 
            "title": "Arguments 3"
        }, 
        {
            "location": "/os_windows/#sleep", 
            "text": "Sleep for 5 seconds  1  timeout 5   NUL\n\n# deprecated\nping 127.0.0.1 -n 6   nul", 
            "title": "Sleep"
        }, 
        {
            "location": "/os_windows/#conditional-4", 
            "text": "if exist input.dat goto handle_input_file\n    echo The file input.dat does not exist\n    pause\n    exit /b\n:handle_input_file", 
            "title": "Conditional 4"
        }, 
        {
            "location": "/os_windows/#loop-2", 
            "text": ":while1\necho forever loop\ngoto :while1   $ test.bat\nforever loop\nforever loop\nforever loop\n...", 
            "title": "Loop 2"
        }, 
        {
            "location": "/os_windows/#windows-how-to-fix-mbr", 
            "text": "Fix MBR with command prompt and installation DVD. Fix MBR with command prompt requires the original Windows 8 or 8.1 installation DVD. The instructions are  1  1.Boot from the original installation DVD.\n2.At the Welcome screen, click \"Repair your computer\".\n3.Choose\" Troubleshoot   Advanced options   Command Prompt\".\n4.When the Command Prompt loads, type the following commands in order:  bootrec /FixMbr\nbootrec /FixBoot\nbootrec /ScanOs\nbootrec /RebuildBcd  Remember to press \"Enter\" after each command and wait for each operation to finish.  5.Remove the DVD from the disk tray.\n6.Type exit and Hit \"Enter\".\n7.Restart your computer and check if Windows 8/8.1 can boot now.", 
            "title": "Windows: How to fix MBR"
        }, 
        {
            "location": "/os_windows/#installing-theano-on-windows-81", 
            "text": "Getting\u00a0theano works in Windows 8.1 is not easy but possible. The important is use the right receipts. I found the right receipts and nice tutorial  here  Receipts   Windows 8.1 64-bit  CUDA 64-bit 7  Visual Studio 2013 (compiler 12.0) Ultimate  Anaconda 64-bit 2.1.0  Git-scm   I'm very happy getting things done.  PS C:Usersrain  python\nPython 2.7.8 |Anaconda 2.1.0 (64-bit)| (default, Jul 2 2014, 15:12:11) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nAnaconda is brought to you by Continuum Analytics.\nPlease check out: http://continuum.io/thanks and https://binstar.org  import theano\nDEBUG: nvcc STDOUT mod.cu\nCreating library C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_\n3_GenuineIntel-2.7.8-64/cuda_ndarray/cuda_ndarray.lib and object C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8\n-6.2.9200-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-2.7.8-64/cuda_ndarray/cuda_ndarray.exp\n\nUsing gpu device 0: GeForce GTX 980\nDEBUG: nvcc STDOUT mod.cu\nCreating library C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_\n3_GenuineIntel-2.7.8-64/tmpgt3iqm/c8d7bd33dfef61705c2854dd1f0cb7ce.lib and object C:/Users/rain/AppData/Local/Theano/com\npiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-2.7.8-64/tmpgt3iqm/c8d7bd33dfef61705c2854dd\n1f0cb7ce.exp\n\nDEBUG: nvcc STDOUT mod.cu\nCreating library C:/Users/rain/AppData/Local/Theano/compiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_\n3_GenuineIntel-2.7.8-64/tmpfab1so/0fc80e98cce631ecaa526b69dd28dae1.lib and object C:/Users/rain/AppData/Local/Theano/com\npiledir_Windows-8-6.2.9200-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-2.7.8-64/tmpfab1so/0fc80e98cce631ecaa526b69\ndd28dae1.exp      Windows MBR fix    While loop in batch    Command line parameters    Windows Batch Files for Fun and Profit", 
            "title": "Installing Theano on Windows 8.1"
        }, 
        {
            "location": "/ux/", 
            "text": "1. Design Principles\n\n\nUI Design Do\u2019s and Don\u2019ts\n\n\nAndroid Design Principles\n\n\n2. Design Trends\n\n\n2.1 Material Design \n1\n\n\ncomponents\n\n\n\n\nWe challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.\n\n\n\n\n\n\nTools\n\n\n\n\nmaterialpalette.com\n\n\nIcon: fa2png\n\n\n\n\nUI Components\n\n\n\n\nData Binding\n\n\nTransclusion\n\n\nDirective - Fragments\n\n\nMessaging\n\n\nIntent \nAndroid\n \n1\n\n\nIntents are asynchronous messages which allow application components to request functionality from other Android components. Intents allow you to interact with components from the same applications as well as with components contributed by other applications. For example, an activity can start an external activity for taking a picture.\n\n\nIntents are objects of the android.content.Intent type. Your code can send them to the Android system defining the components you are targeting. For example, via the startActivity() method you can define that the intent should be used to start an activity.\n\n\nAn intent can contain data via a Bundle. This data can be used by the receiving component.\n\n\nStyle \n Theme\n\n\nAndroid Development: Explaining Styles and Themes, https://m.youtube.com/#/watch?v=MXpG3Xq0w3A\n\n\nResponsive Design\n\n\nSupport Multi Screen \n2\n\n\n\n\n\n\n\n\n\n\nIntent Android\n\n\n\n\n\n\nSupport Multi Screen", 
            "title": "UX/UI"
        }, 
        {
            "location": "/ux/#1-design-principles", 
            "text": "UI Design Do\u2019s and Don\u2019ts  Android Design Principles", 
            "title": "1. Design Principles"
        }, 
        {
            "location": "/ux/#2-design-trends", 
            "text": "", 
            "title": "2. Design Trends"
        }, 
        {
            "location": "/ux/#21-material-design-1", 
            "text": "components   We challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.    Tools   materialpalette.com  Icon: fa2png", 
            "title": "2.1 Material Design 1"
        }, 
        {
            "location": "/ux/#ui-components", 
            "text": "", 
            "title": "UI Components"
        }, 
        {
            "location": "/ux/#data-binding", 
            "text": "", 
            "title": "Data Binding"
        }, 
        {
            "location": "/ux/#transclusion", 
            "text": "Directive - Fragments", 
            "title": "Transclusion"
        }, 
        {
            "location": "/ux/#messaging", 
            "text": "Intent  Android   1  Intents are asynchronous messages which allow application components to request functionality from other Android components. Intents allow you to interact with components from the same applications as well as with components contributed by other applications. For example, an activity can start an external activity for taking a picture.  Intents are objects of the android.content.Intent type. Your code can send them to the Android system defining the components you are targeting. For example, via the startActivity() method you can define that the intent should be used to start an activity.  An intent can contain data via a Bundle. This data can be used by the receiving component.", 
            "title": "Messaging"
        }, 
        {
            "location": "/ux/#style-theme", 
            "text": "Android Development: Explaining Styles and Themes, https://m.youtube.com/#/watch?v=MXpG3Xq0w3A", 
            "title": "Style &amp; Theme"
        }, 
        {
            "location": "/ux/#responsive-design", 
            "text": "Support Multi Screen  2      Intent Android    Support Multi Screen", 
            "title": "Responsive Design"
        }, 
        {
            "location": "/software_architecture/", 
            "text": "Service-Oriented Architecture\n\n\nA service-oriented architecture (SOA) is an architectural pattern in computer software design in which application components provide services to other components via a communications protocol, typically over a network. The principles of service-orientation are independent of any vendor, product or technology. \n2\n\n\n\n\nGenerally accepted view \n1\n\n\n\n\nBoundaries are explicit\n\n\nServices are autonomous\n\n\nServices share schema and contract, not class\n\n\nService compatibility is based on policy\n\n\n\n\nMicroservices\n\n\n\n\nIn computing, microservices is a software architecture style in which complex applications are composed of small, independent processes communicating with each other using language-agnostic APIs. These services are small building blocks, highly decoupled and focussed on doing a small task, facilitating a modular approach to system-building. One of concepts which integrates microservices as a software architecture style is dew computing. \n1\n\n\n\n\n\n\nProperties \n2\n\n\n\n\nEach running in its own process\n\n\nCommunicating with lightweight mechanisms, often an \nHTTP resource API\n\n\nBuild around \nbusiness capabilities\n\n\nIndependently deployable\n\n\nfully automated\n deployment\n\n\nMaybe in a \ndifferent programming language\n and use \ndifferent data storage\n technologies\n\n\n\n\nMonolith vs Microservice\n\n\n\n\n\n\nMonolith\n\n\nMicroservice\n\n\n\n\n\n\nSimplicity\n\n\nPartial Deployment\n\n\n\n\n\n\nConsistency\n\n\nAvailability\n\n\n\n\n\n\nInter-module refactoring\n\n\nPreserve Modularity\n\n\n\n\n\n\n\n\nMultiple Platforms\n\n\n\n\n\n\n\nBenefits \n4\n\n\n\n\nTheir small size enables developers to be most productive.\n\n\nIt's easy to comprehend and test each service.\n\n\nYou can correctly handle failure of any dependent service.\n\n\nThey reduce impact of correlated failures.\n\n\n\n\nWeb Service\n\n\nRESTful API\n\n\n\n\nREST Client\n\n\nSense (Beta)\n\n\nA JSON aware developer console to ElasticSearch.\n\n\nAPI Document and Client Generator\n\n\nhttp://swagger.io/swagger-editor/\n\n\nAPI Client\n\n\nCRUD Pet\n\n\n\n\n\n\n\n\nAPI\n\n\nClient\n\n\n\n\n\n\nMethod\n\n\nURL\n\n\nBody\n\n\nReturn Body\n\n\nMethod\n\n\n\n\n\n\nGET\n\n\n/pets\n\n\n\n\n[Pet]\n\n\nPetApi.list()\n\n\n\n\n\n\nPOST\n\n\n/pets/\n\n\nPet\n\n\nPet\n\n\nPetApi.create(pet)\n\n\n\n\n\n\nGET\n\n\n/pets/pet_id\n\n\n\n\nPet\n\n\nPetApi.get(pet_id)\n\n\n\n\n\n\nPUT\n\n\n/pets/pet_id\n\n\nPet\n\n\nPet\n\n\nPetApi.update(pet_id, pet)\n\n\n\n\n\n\nDELETE\n\n\n/pets/pet_id\n\n\n\n\n\n\nPetApi.delete(pet_id)\n\n\n\n\n\n\n\n\n\n\n\n\nCRUD Store\n\n\n\n\n\n\n\n\nGET /stores\n\n\nStoreApi.list()\n\n\n\n\n\n\n...\n\n\n...\n\n\n\n\n\n\n\n\n\nRelationships\n\n\nMany to many\n\n\n\n\n\n\n\n\nGET /stores/sotre_id/pets\n\n\nStoreApi.get_pets(store_id)\n\n\n\n\n\n\n### Example\n\n[https://api.facebook.com/method/links.getStats?urls=%%URL%%\n=json](https://api.facebook.com/method/links.getStats?urls=%%URL%%\n=json)\n\n\n\n\n\n\n\n\n\n\n\n\nMicroservices\n\n\n\n\n\n\nSlide 11/42, Micro-servies\n\n\n\n\n\n\nMartin Fowler, Microservices, youtube\n\n\n\n\n\n\nRick E. Osowski, Microservices in action, Part 1: Introduction to microservices, IBM developerworks", 
            "title": "SA"
        }, 
        {
            "location": "/software_architecture/#service-oriented-architecture", 
            "text": "A service-oriented architecture (SOA) is an architectural pattern in computer software design in which application components provide services to other components via a communications protocol, typically over a network. The principles of service-orientation are independent of any vendor, product or technology.  2", 
            "title": "Service-Oriented Architecture"
        }, 
        {
            "location": "/software_architecture/#generally-accepted-view-1", 
            "text": "Boundaries are explicit  Services are autonomous  Services share schema and contract, not class  Service compatibility is based on policy", 
            "title": "Generally accepted view 1"
        }, 
        {
            "location": "/software_architecture/#microservices", 
            "text": "In computing, microservices is a software architecture style in which complex applications are composed of small, independent processes communicating with each other using language-agnostic APIs. These services are small building blocks, highly decoupled and focussed on doing a small task, facilitating a modular approach to system-building. One of concepts which integrates microservices as a software architecture style is dew computing.  1", 
            "title": "Microservices"
        }, 
        {
            "location": "/software_architecture/#properties-2", 
            "text": "Each running in its own process  Communicating with lightweight mechanisms, often an  HTTP resource API  Build around  business capabilities  Independently deployable  fully automated  deployment  Maybe in a  different programming language  and use  different data storage  technologies", 
            "title": "Properties 2"
        }, 
        {
            "location": "/software_architecture/#monolith-vs-microservice", 
            "text": "Monolith  Microservice    Simplicity  Partial Deployment    Consistency  Availability    Inter-module refactoring  Preserve Modularity     Multiple Platforms", 
            "title": "Monolith vs Microservice"
        }, 
        {
            "location": "/software_architecture/#benefits-4", 
            "text": "Their small size enables developers to be most productive.  It's easy to comprehend and test each service.  You can correctly handle failure of any dependent service.  They reduce impact of correlated failures.", 
            "title": "Benefits 4"
        }, 
        {
            "location": "/software_architecture/#web-service", 
            "text": "", 
            "title": "Web Service"
        }, 
        {
            "location": "/software_architecture/#restful-api", 
            "text": "", 
            "title": "RESTful API"
        }, 
        {
            "location": "/software_architecture/#rest-client", 
            "text": "Sense (Beta)  A JSON aware developer console to ElasticSearch.", 
            "title": "REST Client"
        }, 
        {
            "location": "/software_architecture/#api-document-and-client-generator", 
            "text": "http://swagger.io/swagger-editor/", 
            "title": "API Document and Client Generator"
        }, 
        {
            "location": "/software_architecture/#api-client", 
            "text": "CRUD Pet     API  Client    Method  URL  Body  Return Body  Method    GET  /pets   [Pet]  PetApi.list()    POST  /pets/  Pet  Pet  PetApi.create(pet)    GET  /pets/pet_id   Pet  PetApi.get(pet_id)    PUT  /pets/pet_id  Pet  Pet  PetApi.update(pet_id, pet)    DELETE  /pets/pet_id    PetApi.delete(pet_id)      CRUD Store     GET /stores  StoreApi.list()    ...  ...     Relationships  Many to many     GET /stores/sotre_id/pets  StoreApi.get_pets(store_id)   \n\n### Example\n\n[https://api.facebook.com/method/links.getStats?urls=%%URL%% =json](https://api.facebook.com/method/links.getStats?urls=%%URL%% =json)     Microservices    Slide 11/42, Micro-servies    Martin Fowler, Microservices, youtube    Rick E. Osowski, Microservices in action, Part 1: Introduction to microservices, IBM developerworks", 
            "title": "API Client"
        }, 
        {
            "location": "/licenses/", 
            "text": "Licenses\n\n\n\n\nMore\n\n\n\n\nOpen Source Licenses\n\n\nChoose A License\n\n\nTop 20 Open Source Licenses", 
            "title": "Licenses"
        }, 
        {
            "location": "/licenses/#licenses", 
            "text": "", 
            "title": "Licenses"
        }, 
        {
            "location": "/licenses/#more", 
            "text": "Open Source Licenses  Choose A License  Top 20 Open Source Licenses", 
            "title": "More"
        }
    ]
}